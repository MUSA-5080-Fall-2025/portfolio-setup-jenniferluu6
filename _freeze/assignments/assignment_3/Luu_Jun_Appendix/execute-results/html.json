{
  "hash": "7e5ad72f6926bec50401961d7a0f8981",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Philadelphia Housing Model—Technical Appendix\"\nsubtitle: \"Predicting Residential Property Prices\"\nauthor: \"Ming Cao, Mark Deng, Jun Luu, Josh Rigsby, Alex Stauffer, Tess Vu\"\nformat: \n  html:\n    code-fold: show\n    toc: true\n    toc-location: left\n    theme: lux\nexecute:\n  message: false\n  warning: false\n---\n\n# Data Cleaning\n\n## Primary Philadelphia Sales Data (OpenDataPhilly)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Import relevant libraries.\nlibrary(car)\nlibrary(dplyr)\nlibrary(ggcorrplot)\nlibrary(ggplot2)\nlibrary(grid)\nlibrary(gridExtra)\nlibrary(knitr)\nlibrary(kableExtra)\nlibrary(scales)\nlibrary(sf)\nlibrary(stringr)\nlibrary(tibble)\nlibrary(tidycensus)\nlibrary(tidyr)\nlibrary(tidyverse)\nlibrary(tigris)\nlibrary(tmap)\nlibrary(units)\n\noptions(scipen = 999)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Property data.\nproperties_path <- \"data/philly_properties.csv\"\nproperties <- read.csv(properties_path)\n\n# Capture dimensions.\nog_property_dimension <- dim(properties)\n\n# Set Census API key.\ncensus_api_key(\"3aaee31789e10b674a531e9f236c35d5394b19ed\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# All variables are character strings, remove white space then convert numeric character variables to numeric classes for chosen variables.\n\nproperties <- properties %>%\n  mutate(across(where(is.character), str_trim),\n         across(c(fireplaces, garage_spaces, number_of_bathrooms, number_stories,\n                  sale_price, total_livable_area, year_built), as.numeric)) %>%\n  rename(fireplace_num = fireplaces,\n         garage_num = garage_spaces,\n         bath_num = number_of_bathrooms,\n         story_num = number_stories,\n         square_feet = total_livable_area,\n         basement_type = basements,\n         ac_binary = central_air,\n         fuel_type = fuel,\n         )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter to residential properties and 2023-2024 sales.\n# Note: Category code #1 is for residential.\nresidential_prop <- properties %>%\n  filter(.,\n         category_code == 1,\n         startsWith(sale_date, \"2023\") | startsWith(sale_date, \"2024\"))\n\n# Drop empty variables or variables not needed for model.\nresidential_prop <- residential_prop %>%\n  select(c(basement_type, ac_binary, fireplace_num, fuel_type, garage_num,\n           bath_num, story_num, sale_date, sale_price,\n           square_feet, year_built, shape)\n         )\n\n# Make empty character column values NA.\nresidential_prop <- residential_prop %>%\n  mutate(across(where(is.character), ~na_if(., \"\")))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Drop prices that are less than $10,000 as a catch-all (might not be as reflective for rural areas). Avoiding dropping prices based on percent of assessed value since property assessments can be biased against minoritized communities. Ideal drop would add deed type to drop any family or forced transfers.\nresidential_prop <- residential_prop %>%\n  filter(sale_price > 10000,\n         square_feet > 0)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create building age column, change central air to binary, and adjust basement and fuel types.\n# Create log value for the sale price.\nresidential_prop <- residential_prop %>%\n  mutate(ln_sale_price = log(sale_price),\n         age = 2025 - year_built,\n         ln_square_feet = log(square_feet),\n         ac_binary = case_when(\n           ac_binary == \"Y\" ~ 1,\n           ac_binary == \"N\" ~ 0),\n         basement_type = case_when(\n           basement_type == \"0\" ~ \"None\",\n           basement_type == \"A\" ~ \"Full Finished\",\n           basement_type == \"B\" ~ \"Full Semi-Finished\",\n           basement_type == \"C\" ~ \"Full Unfinished\",\n           basement_type == \"D\" ~ \"Full Unknown Finish\",\n           basement_type == \"E\" ~ \"Partial Finished\",\n           basement_type == \"F\" ~ \"Partial Semi-Finished\",\n           basement_type == \"G\" ~ \"Partial Unfinished\",\n           basement_type == \"H\" ~ \"Partial Unknown Finish\",\n           basement_type == \"I\" ~ \"Unknown Size Finished\",\n           basement_type == \"J\" ~ \"Unknown Size Unfinished\"),\n         fuel_type = case_when(\n           fuel_type == \"A\" ~ \"Natural Gas\",\n           fuel_type == \"B\" ~ \"Oil Heat\",\n           fuel_type == \"C\" ~ \"Electric\",\n           fuel_type == \"D\" ~ \"Coal\",\n           fuel_type == \"E\" ~ \"Solar\",\n           fuel_type == \"F\" ~ \"Wood\",\n           fuel_type == \"G\" ~ \"Other\",\n           fuel_type == \"H\" ~ \"None\")\n         )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Turn categorical data into factors so OLS regression doesn't handle the data as a list of strings.\nresidential_prop$basement_type <- as.factor(residential_prop$basement_type)\nresidential_prop$fuel_type <- as.factor(residential_prop$fuel_type)\n\n# Change the reference categories for baseline comparison.\nresidential_prop$basement_type <- relevel(residential_prop$basement_type, ref = \"None\")\nresidential_prop$fuel_type <- relevel(residential_prop$fuel_type, ref = \"Natural Gas\")\n\n# Place fuel type with 10 or less counts into other category.\nresidential_prop <- residential_prop %>%\n  mutate(fuel_type = fct_lump_min(fuel_type, min = 11, other_level = \"Other\"))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fixed effect temporal market fluctuations. Based on sale date, splitting the years into quarters (Q1, Q2, Q3, Q4). Potential fixed effect.\nresidential_prop <- residential_prop %>%\n  mutate(\n    quarters_fe = quarter(as_datetime(sale_date))\n    )\n\n# Make it a factor.\nresidential_prop$quarters_fe <- factor(residential_prop$quarters_fe)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Capture dimensions.\nafter_property_dimension <- dim(residential_prop)\n\n# Convert residential property to geodataframe. Use EPSG 2272 for South Pennsylvania in feet.\n# Drop shape when finished creating geometry.\nresidential_prop_gdf <- residential_prop %>%\n  mutate(geometry = st_as_sfc(shape)) %>%\n  st_as_sf(crs = 2272) %>%\n  rename(geometry_point = geometry) %>%\n  select(-c(shape))\n```\n:::\n\n\n# Spatial Data and Feature Engineering\n\n## Spatial Data (OpenDataPhilly)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in Philadelpha census tracts.\nphilly_tracts_path <- \"data/philly_tracts/philly_tracts.shp\"\nphilly_tracts <- st_read(philly_tracts_path)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `philly_tracts' from data source \n  `/Users/jenniferluu/Documents/5080portfolio-setup-jenniferluu6/assignments/assignment_3/data/philly_tracts/philly_tracts.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3446 features and 12 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -80.51985 ymin: 39.7198 xmax: -74.68956 ymax: 42.51607\nGeodetic CRS:  NAD83\n```\n\n\n:::\n\n```{.r .cell-code}\n# Match CRS.\nphilly_tracts <- st_transform(philly_tracts, crs = 2272)\n\n# Left spatial join.\nresidential_points <- st_join(residential_prop_gdf, philly_tracts)\n\n# Drop unnecessary columns and remove incomplete observations (rows) for upcoming spatial feature computations.\nresidential_points <- residential_points %>%\n  select(-c(FUNCSTAT, MTFCC, NAMELSAD, NAME,\n            STATEFP, COUNTYFP, TRACTCE)) %>%\n  na.omit(.)\n\n# Remove unneeded datasets for housekeeping and call garbage collector to reduce memory.\nrm(properties, residential_prop, residential_prop_gdf)\ngc()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n           used  (Mb) gc trigger  (Mb) limit (Mb)  max used   (Mb)\nNcells  3562911 190.3   11772104 628.7         NA  10689264  570.9\nVcells 12820016  97.9  112059716 855.0      16384 140027659 1068.4\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Proximity to downtown.\n\n# Decided on Euclidean distance because network proximity computation is demanding on thousands of points, even with parallel programming.\n\n# Create single Center City point feature based on City Hall coordinates.\ncenter_city <- st_sfc(st_point(c(-75.163500, 39.952800)), crs = 4326) %>%\n  st_transform(crs = 2272)\n\n# Need to add mile units for operations. Then remove units object for easier plotting.\nresidential_points$city_dist_mi <- (st_distance(residential_points, st_union(center_city))) %>%\n  set_units(\"mi\") %>%\n  drop_units() %>%\n  as.numeric()\n\n# Log transform because distance benefit diminishes, for potential use.\nresidential_points$ln_city_dist <- log(residential_points$city_dist_mi + 0.1)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Transit proximity.\n# Major cities could be distance to nearest transit like metro/rail stations, but suburban and rural areas might be better served by distance to nearest major highway.\n# Read in SEPTA stops.\nsepta_stops_path <- \"data/septa_stops.csv\"\n\nsepta_stops_df <- read.csv(septa_stops_path)\n\n# Make csv a geodataframe.\nsepta_stops <- septa_stops_df %>%\n  st_as_sf(., coords = c(\"Lon\", \"Lat\"), crs = 4326)\n\n# Match CRS.\nsepta_stops <- septa_stops %>%\n  st_transform(., crs = 2272)\n\n# Stops are duplicated for the same station because the data includes directions for all cardinal directions as well as bus, rail, and trolley for the same location. This means a single station could have more than one point representing a single location residents go to commute.\n# Create new column with stop name without the cardinal suffixes and keep only the unique station values.\nsepta_stops <- septa_stops %>%\n  mutate(stations = if_else(\n    str_detect(StopAbbr, \"NO$|SO$|EA$|WE$|NE$|NW$|SE$|SW$\"),\n    str_sub(StopAbbr, end = -3),\n    str_sub(StopAbbr)\n    )\n  ) %>%\n  distinct(stations, .keep_all = TRUE)\n\n# Create buffer zone for stops within a half mile. This is ~10 minute walk, depending on topography.\n# Note: EPSG 2272 is measured in feet, not miles.\nsepta_distance <- st_buffer(residential_points, 2640)\n\n# Create number of stops in the buffer zone.\nsepta_stations <- st_intersects(septa_distance, septa_stops)\n\n# Append buffer zone counts and put into main tract data. Create a logged version for potential use as well because distance benefit tapers off.\nresidential_points <- residential_points %>%\n  mutate(\n    septa_half_mi = lengths(septa_stations),\n    ln_septa_half_mi = log(septa_half_mi + 0.1)\n  )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Park proximity / size. Measuring distance is important for accessibility, but the size of the park often matters because a property near a block-sized pocket of green space is not equivalent to being near a large one like Wissahickon Valley Park.\n\n# Read in geojson data.\nparks_path <- \"data/parks.geojson\"\n\nparks <- st_read(parks_path)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `parks' from data source \n  `/Users/jenniferluu/Documents/5080portfolio-setup-jenniferluu6/assignments/assignment_3/data/parks.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 63 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -75.2837 ymin: 39.87048 xmax: -74.95865 ymax: 40.13191\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Match CRS and filter by parks.\nparks <- parks %>%\n  st_transform(., crs = 2272) %>%\n  filter(str_detect(USE_, \"PARK\"))\n\n# Get distance to the edge of the nearest park.\n# Note: Don't try to do spatial operations in apply() and mutate().\n# Distance matrix of residential properties to parks.\nparks_matrix <- st_distance(residential_points, parks)\n\n# Get the nearest distance for each point.\nresidential_points$parks_mile <- apply(parks_matrix, 1, min)\n\n# Convert to miles.\nresidential_points$parks_mile <- as.numeric(residential_points$parks_mile) / 5280\n\n# Log parks data for potential use because of diminishing distance benefits.\nresidential_points$ln_park_dist <- as.numeric(log(residential_points$parks_mile + 0.1))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convenience/Food points of interest. Using kNN to measure the density of these amenities rather than nearest amenity point.\namenities_path <- \"data/osm_pois/osm_pois.shp\"\namenities <- st_read(amenities_path)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `osm_pois' from data source \n  `/Users/jenniferluu/Documents/5080portfolio-setup-jenniferluu6/assignments/assignment_3/data/osm_pois/osm_pois.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 65127 features and 4 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -80.52111 ymin: 39.71816 xmax: -74.69473 ymax: 42.25797\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Filter amenities by convenience and food.\namenities <- amenities %>%\n  filter(fclass %in% c(\n    \"atm\", \"bakery\", \"bank\", \"bar\", \"beauty_shop\", \"biergarten\", \"bookshop\",\n    \"butcher\", \"cafe\", \"convenience\", \"department_store\", \"fast_food\", \"food_court\",\n    \"greengrocer\", \"hairdresser\", \"kiosk\", \"laundry\", \"market_place\", \"pharmacy\",\n    \"mall\", \"pub\", \"restaurant\", \"supermarket\"\n  )\n         ) %>%\n  st_transform(., crs = 2272)\n\n# Distance matrix of residential properties to amenities.\namenities_matrix <- st_distance(residential_points, amenities)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# k-Nearest Neighbors (kNN) function.\nknn_distance <- function(distance_matrix, k) {\n  apply(distance_matrix, 1, function(distances){\n    mean(as.numeric(sort(distances)[1:k]))\n  })\n}\n\n# Create kNN feature for amenities. k = 4 to balance for urban and suburban areas, probably not as representative of rural areas.\nresidential_points <- residential_points %>%\n  mutate(\n    knn_amenity_mi = as.numeric(knn_distance(amenities_matrix, k = 4))\n  )\n\n# Convert to miles.\nresidential_points$knn_amenity_mi <- as.numeric(residential_points$knn_amenity_mi / 5280)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Fixed effect neighborhoods.\nneighborhoods_path <- \"data/philadelphia_neighborhoods/philadelphia_neighborhoods.shp\"\nphilly_neighborhoods <- st_read(neighborhoods_path)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `philadelphia_neighborhoods' from data source \n  `/Users/jenniferluu/Documents/5080portfolio-setup-jenniferluu6/assignments/assignment_3/data/philadelphia_neighborhoods/philadelphia_neighborhoods.shp' \n  using driver `ESRI Shapefile'\nSimple feature collection with 159 features and 5 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: -75.28026 ymin: 39.86701 xmax: -74.95576 ymax: 40.13799\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\n# Match CRS.\nphilly_neighborhoods <- philly_neighborhoods %>%\n  st_transform(., crs = 2272)\n\n# Join to residential points and rename to neighborhoods.\nresidential_points <- residential_points %>%\n  st_join(., philly_neighborhoods) %>%\n  rename(neighborhood_fe = MAPNAME)\n\n# Make the neighborhoods a factor.\nresidential_points$neighborhood_fe <- relevel(factor(residential_points$neighborhood_fe), ref = \"East Falls\")\n\n# Place neighborhoods with 10 or less sales into a small neighborhoods category.\nresidential_points <- residential_points %>%\n  mutate(neighborhood_fe = fct_lump_min(neighborhood_fe, min = 11, other_level = \"Small Neighborhoods\"))\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Capture spatial feature dimensions.\nafter_feat_eng_dimension <- dim(residential_points)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Spatial feature creation table, select spatial features into a separate data frame and drop geometry.\nspatial_feature_df <- residential_points %>%\n  select(c(city_dist_mi, ln_city_dist, septa_half_mi, ln_septa_half_mi,\n           parks_mile, ln_park_dist, knn_amenity_mi)) %>%\n  na.omit(.) %>%\n  st_drop_geometry()\n\n# Create a tibble from the selected spatial features.\nspatial_summary <- tibble(\n  \"Spatial Features\" = names(spatial_feature_df),\n  \"Description\" = c(\"Distance from city (mi).\", \"Log of distance from city.\", \"Within 0.5mi of SEPTA station.\",\n                    \"Log of 0.5 SEPTA station.\", \"Distance from nearest park (mi).\",\n                    \"Log of distance from nearest park.\", \"k-Nearest Neighbors convenience and food amenities.\")\n)\n\n# Make Kable of spatial features.\nspatial_kable <- kable(spatial_summary,\n                       caption = \"Feature Engineered Variables\",\n                       format.args = list(big.mark = \",\")\n) %>%\n  kable_styling(latex_options = \"striped\",\n                full_width = FALSE) %>%\n  column_spec(1, bold = TRUE, width = \"5cm\") %>%\n  row_spec(0, color = \"#f5f4f0\", background = \"#ff4100\", bold = TRUE)\n\nspatial_kable\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Feature Engineered Variables</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Spatial Features </th>\n   <th style=\"text-align:left;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Description </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;width: 5cm; font-weight: bold;\"> city_dist_mi </td>\n   <td style=\"text-align:left;\"> Distance from city (mi). </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 5cm; font-weight: bold;\"> ln_city_dist </td>\n   <td style=\"text-align:left;\"> Log of distance from city. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 5cm; font-weight: bold;\"> septa_half_mi </td>\n   <td style=\"text-align:left;\"> Within 0.5mi of SEPTA station. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 5cm; font-weight: bold;\"> ln_septa_half_mi </td>\n   <td style=\"text-align:left;\"> Log of 0.5 SEPTA station. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 5cm; font-weight: bold;\"> parks_mile </td>\n   <td style=\"text-align:left;\"> Distance from nearest park (mi). </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 5cm; font-weight: bold;\"> ln_park_dist </td>\n   <td style=\"text-align:left;\"> Log of distance from nearest park. </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 5cm; font-weight: bold;\"> knn_amenity_mi </td>\n   <td style=\"text-align:left;\"> k-Nearest Neighbors convenience and food amenities. </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n**Primary:**\n\nFrom the CSV, we are analyzing the conditions of basements, number of fireplaces, garage spaces, number of bathrooms, number of stories, the total livable area in square feet, the existence of central air, and type of fuel used on the property. We filtered residential category code with the sale dates between 2023 and 2024. We eliminated property prices <10k. Rather than adhering to the percentage of assessed value as a guide for this filter, for it could incorporate marginalized bias, filtering the property prices removes non-market transactions but still incorporates a wide diversity of communities.\n\nThe forced the central air characteristic to become binary rather than “Y” and “N” and made sure to turn the categorical data to factors. The reference categories for types of basements is “None” and for fuel type, it’s “Natural Gas”. We including a building age category computed from the year built data. We logged the square footage and the sale price to correct for right-skewedness. \n\n**Spatial:**\n\nWe inserted the Philadelphia census tracts, changing the CRS to 2272, the ideal projection for SE Pennsylvania analysis. We decided to perform a log transformation on the following variables - city_dist (distance from City Hall in Center City), septa_half_mi (half mile buffer zone from all septa stops within the city geometry), and parks_dist (distance to edge of nearest park in miles) - because their effects on housing prices were non-linear. This transformation ensures that changes in proximity are measured more consistently across the range of distances, rather than being dominated by properties very close to these features.\n\nRegarding amenities, we used k-NN (k nearest neighbors) to measure the density of amenity accessibility rather than individual point data. The amenities are as follows: ATM, bakery, bank, bar, beauty shop, biergarten, bookshop, butcher, café, convenience, department store, fast food, food court, greengrocer, hairdresser, kiosk, laundry, marketplace, pharmacy, mall, pub, restaurant, supermarket.  We filtered by convenience and food, transformed the CRS to 2272 for consistency, and then developed a matrix. The distance was inverted, log-transformed to account for diminishing returns, and scaled it to produce a single numeric value in which higher, positive values indicate greater accessibility to amenities.\n\nWe included neighborhoods as fixed effects to help explain unknown, unquantifiable factors like cultural atmosphere and other neighborhood-specific factors we cannot statistically account for that may influence housing prices. It was converted into a factor so each neighborhood can receive its own baseline model. \nFiscal quarters were also introduced as fixed effects; splitting a year into 4 quarters for unknown factors when it comes to purchasing property (e.g. people are more likely to buy real estate in spring and summer).\n\n### Census Data (TidyCensus)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Open tidycensus data. Using 2023 data, because we are looking at sales 2023-2024\nacs_vars <- load_variables(2023, \"acs5\", cache = TRUE)\n\n# Get acs dimensions.\nog_acs_dimension <- dim(acs_vars)\n\n# The variables that we want from tidycensus\nvariables <- c(\n  median_household_income = \"B19013_001\",\n  total_pop = \"B01003_001\",\n  poverty_white = \"B17001A_001\", # To get poverty percentage\n  poverty_black = \"B17001B_001\",\n  poverty_native = \"B17001C_001\",\n  poverty_asian = \"B17001D_001\",\n  poverty_islander = \"B17001E_001\",\n  poverty_other = \"B17001F_001\",\n  poverty_multiracial = \"B17001G_001\",\n  male_18_24_bach = \"B15001_009\", # Tracts only show bachelor's degrees, unless we want to look at only people 25+\n  male_25_34_bach = \"B15001_017\",\n  male_35_44_bach = \"B15001_025\",\n  male_45_64_bach = \"B15001_033\",\n  male_65plus_bach = \"B15001_041\",\n  female_18_24_bach = \"B15001_050\",\n  female_25_34_bach = \"B15001_058\",\n  female_35_44_bach = \"B15001_066\",\n  female_45_64_bach = \"B15001_074\",\n  female_65plus_bach = \"B15001_082\",\n  total_vacant = \"B25005_001\", # To get vacancy percentage\n  white_total_units = \"B25032A_001\", # Need total units to get percentage of single, detached units and vacant units.\n  white_single_family = \"B25032A_002\",\n  black_total_units = \"B25032B_001\",\n  black_single_family = \"B25032B_002\",\n  native_total_units = \"B25032C_001\",\n  native_single_family = \"B25032C_002\",\n  asian_total_units = \"B25032D_001\",\n  asian_single_family = \"B25032D_002\",\n  islander_total_units = \"B25032E_001\",\n  islander_single_family = \"B25032E_002\",\n  other_total_units = \"B25032F_001\",\n  other_single_family = \"B25032F_002\",\n  multiracial_total_units = \"B25032G_001\",\n  multiracial_single_family = \"B25032G_002\",\n  medhhinc_white = \"B19013A_001\", # Median Household Income\n  medhhinc_black = \"B19013B_001\",\n  medhhinc_native = \"B19013C_001\", \n  medhhinc_asian = \"B19013D_001\", \n  medhhinc_other = \"B19013F_001\",  # There is no tract data for native hawiian/pacific islander, I'm including it with other\n  medhhinc_multiracial = \"B19013G_001\", \n  white_pop = \"B01001A_001\",\n  black_pop = \"B01001B_001\",\n  native_pop = \"B01001C_001\",\n  asian_pop = \"B01001D_001\",\n  islander_pop = \"B01001E_001\",\n  other_pop = \"B01001F_001\",\n  multiracial_pop = \"B01001G_001\"\n)\n\n# We are grouping our data by tracts\nphilly_tract_acs <- get_acs(\n  geography = \"tract\",\n  state = \"PA\",\n  variables = variables,\n  year = 2022,\n  survey = \"acs5\",\n  cache_table = TRUE, \n  output = \"wide\"\n)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Summing up the variables that we need to create our percentage variables\nphilly_tract_acs <- philly_tract_acs %>%\n  mutate(\n    total_poverty = poverty_whiteE + poverty_blackE + poverty_nativeE + poverty_asianE + poverty_islanderE + poverty_otherE + poverty_multiracialE, # Adding all poverty populations together \n    \n    total_bach = male_18_24_bachE + male_25_34_bachE + male_35_44_bachE + male_45_64_bachE + male_65plus_bachE + female_18_24_bachE + female_25_34_bachE + female_35_44_bachE + female_45_64_bachE + female_65plus_bachE, #Adding all bachelors degrees together\n    \n    total_units = white_total_unitsE + black_total_unitsE + native_total_unitsE + asian_total_unitsE + islander_total_unitsE + other_total_unitsE + multiracial_total_unitsE, # Total housing units\n    \n    total_single_family = white_single_familyE + black_single_familyE + native_single_familyE + asian_single_familyE + islander_single_familyE + other_single_familyE + multiracial_single_familyE # Total single family homes\n  )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating our variables that we are going to analyze\nphilly_tract_acs <- philly_tract_acs %>%\n  mutate(\n    pct_poverty = (total_poverty/total_popE)*100, # Divide total poverty population by total population\n\n    pct_bach = (total_bach/total_popE)*100, # Divide bachelor degree holders by total population\n    \n    pct_vacant = (total_vacantE/total_units)*100, # Divide vacant units by total housing units\n    pct_vacant = ifelse(is.infinite(pct_vacant) | total_vacantE > total_units, 100, pct_vacant), # Fixing errors when units equal zero or high MOE\n    \n    pct_single_family = (total_single_family/total_units)*100, # Divide single family homes by total housing units\n    \n    medhhinc = \n  (ifelse(is.na(medhhinc_whiteE), 0, medhhinc_whiteE) * white_popE +\n   ifelse(is.na(medhhinc_blackE), 0, medhhinc_blackE) * black_popE +\n   ifelse(is.na(medhhinc_nativeE), 0, medhhinc_nativeE) * native_popE +\n   ifelse(is.na(medhhinc_asianE), 0, medhhinc_asianE) * asian_popE +\n   ifelse(is.na(medhhinc_otherE), 0, medhhinc_otherE) * (islander_popE + other_popE) +\n   ifelse(is.na(medhhinc_multiracialE), 0, medhhinc_multiracialE) * multiracial_popE) / total_popE)\n# For median household income, I had to turn all median household incomes that were NA to 0, so that it would not mess up the formula. \n# Multiplying median household income times population by race. There was no islander median household income, so I included it in other. All divided by the total population, to get the total median household income. \n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Creating a summary table \nphilly_acs_summary <- philly_tract_acs %>%\n  select(\n    GEOID, \n    NAME,\n    pct_poverty,\n    pct_bach,\n    pct_vacant,\n    pct_single_family,\n    medhhinc\n  )\n\n# Get after acs dimension.\nafter_acs_dimension <- dim(philly_acs_summary)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Join primary and census data.\nfinal_data <- residential_points %>%\n  left_join(philly_acs_summary, by = \"GEOID\") %>%\n  select(-c(sale_date, year_built, ALAND, AWATER,\n            INTPTLAT, INTPTLON, NAME.x, LISTNAME, NAME.y,\n            Shape_Leng, Shape_Area)\n         )\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create key variables list.\nkey_columns <- c(\"sale_price\", \"ln_sale_price\", \"square_feet\", \"ln_square_feet\",\n                 \"bath_num\", \"fireplace_num\", \"garage_num\", \"ac_binary\",\n                 \"story_num\", \"age\", \"city_dist_mi\", \"ln_city_dist\",\n                 \"septa_half_mi\", \"ln_septa_half_mi\", \"parks_mile\", \"ln_park_dist\",\n                 \"knn_amenity_mi\", \"pct_poverty\", \"pct_bach\",\n                 \"pct_vacant\", \"pct_single_family\", \"medhhinc\",\n                 \"basement_type\", \"fuel_type\", \"neighborhood_fe\", \"quarters_fe\")\n\n# Reorder for key columns first and drop all rows with NA because OLS needs complete observations.\nfinal_data <- final_data %>%\n  select(any_of(key_columns), everything()) %>%\n  na.omit(.)\n\n# Get final dimension.\nfinal_dimension <- dim(final_data)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Separate before/after dimensions for data.\ndimensions <- data.frame(\n  rows_columns = c(\"Rows\", \"Columns\"),\n  \"Property Data Before\" = og_property_dimension,\n  \"Property Data After\" = after_property_dimension,\n  \"Property Data After Feature Engineering\" = after_feat_eng_dimension,\n  \"ACS Data Before\" = og_acs_dimension,\n  \"ACS Data After\" = after_acs_dimension,\n  \"Final Data\" = final_dimension\n)\n\n# Make Kable of dimensions.\ndimensions_kable <- kable(dimensions,\n                          col.names = c(\"Dimensions\", \"Property Data Before\", \"Property Data After\",\n                                        \"Property Data After Feature Engineering\",\n                                        \"ACS Data Before\", \"ACS Data After\", \"Final Data\"),\n                          digits = 2,\n                          caption = \"Before and After Data Dimensions\",\n                          format.args = list(big.mark = \",\")\n) %>%\n  kable_styling(latex_options = \"striped\",\n                full_width = FALSE) %>%\n  column_spec(1, bold = TRUE) %>%\n  row_spec(0, color = \"#f5f4f0\", background = \"#ff4100\", bold = TRUE)\n\ndimensions_kable\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Before and After Data Dimensions</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Dimensions </th>\n   <th style=\"text-align:right;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Property Data Before </th>\n   <th style=\"text-align:right;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Property Data After </th>\n   <th style=\"text-align:right;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Property Data After Feature Engineering </th>\n   <th style=\"text-align:right;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> ACS Data Before </th>\n   <th style=\"text-align:right;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> ACS Data After </th>\n   <th style=\"text-align:right;font-weight: bold;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Final Data </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Rows </td>\n   <td style=\"text-align:right;\"> 583,776 </td>\n   <td style=\"text-align:right;\"> 26,344 </td>\n   <td style=\"text-align:right;\"> 13,884 </td>\n   <td style=\"text-align:right;\"> 28,261 </td>\n   <td style=\"text-align:right;\"> 3,446 </td>\n   <td style=\"text-align:right;\"> 13,883 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;font-weight: bold;\"> Columns </td>\n   <td style=\"text-align:right;\"> 79 </td>\n   <td style=\"text-align:right;\"> 16 </td>\n   <td style=\"text-align:right;\"> 33 </td>\n   <td style=\"text-align:right;\"> 4 </td>\n   <td style=\"text-align:right;\"> 7 </td>\n   <td style=\"text-align:right;\"> 28 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n**Census:**\n\nUsing tidycensus, we imported all variables that aligned with our structural data from 2023 ACS data by tracts: median household income, total population, poverty by ethnicity (White, Black, Native American, Asian, Pacific Islander, “Other,” Multiracial), males and females aged 18–65+ with bachelor’s degrees or higher, total vacancy, and total housing units by ethnicity, as well as single-family households and median household income per ethnic group. We compiled the individual poverty, bachelor’s degree, unit, and single-family household counts by ethnicity to form the following percentage variables: total_poverty, total_bach, total_units, and total_single_family.\n\nFrom this, we calculated pct_poverty, pct_bach, pct_vacant (accounting for ACS errors), pct_single_family, and medhhinc, transforming NAs to 0 for regression analysis.\n\nUsing our residential property vector data (which includes structural, spatial, and feature-engineered variables), we performed a left join on the cleaned ACS summary data by GEOID.\n\nAfter organizing the final dataset so key variables appear first, we generated a kable summarizing the workflow. The final dataset contains 26,344 observations and 29 columns.\n\n# Exploratory Data Analysis (EDA)\n\n### Visualizations\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Distribution of Sale Prices Histogram\n\nsale_price_hist <- ggplot(final_data, aes(x = sale_price)) +\n  geom_histogram(fill = \"#6BAED6\", color = \"white\", bins = 25) +\n  labs(title = \"Distribution of Sale Prices\",\n       x = \"Sale Price ($)\",\n       y = \"Count\") +\n  scale_x_continuous(labels = scales::dollar) +\n  scale_y_continuous(labels = scales::comma) +\n  theme_minimal(base_size = 13) +\n  theme(\n    panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n    panel.grid.minor = element_line(color = \"gray95\", size = 0.2),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14, margin = margin(b = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n    )\n\nsale_price_hist\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n**Distribution of Sales Prices - Histogram**\n\nThe distribution of sales prices is heavily skewed right, with a high percentage of thee transactions below $500,000, and a relatively small number of homes falling in the multi-million dollar range. This chart also also gives insight into the potential presence of high leverage outliers falling toward the left. A concentration of thousands of sales clustered on the lower end of the price ranges suggests strong segmentation, meaning that the market is split into distinct groups, where you see a large cluster of homes that are relatively similar and a smaller but very different cluster of high-value properties with luxury features and few homes in-between, the market looks like separate groups  rather than one gradually increasing scale. It’s important to note that this spread likely indicates heteroskedasticity, and would require a log transformation for statistical inference.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Geographic distribution map - Sale Price\n\ntmap_mode(\"plot\")\n\nsale_price_map <- tm_shape(philly_neighborhoods) +\n  tm_polygons(col = \"gray95\", border.col = \"gray65\") +\n  tm_shape(final_data) +\n  tm_dots(col = \"sale_price\",\n          palette = \"YlOrRd\",\n          size = 0.05,\n          style = \"quantile\",\n          title = \"Sale Price ($)\") +\n  tm_layout(main.title = \"Geographic Distribution of Sale Prices\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.outside = TRUE,\n            frame = FALSE,\n            bg.color = \"#f5f4f0\")\n\nsale_price_map\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-27-1.png){width=960}\n:::\n\n```{.r .cell-code}\n#tmap_save(tm = sale_price_map, filename = \"slide_images/geo-price-map.png\", width = 10, height = 6, units = \"in\", dpi = 300, bg = \"transparent\")\n```\n:::\n\n\n**Geographic Distribution of Sales Prices - Map**\n\nThis map displays a high variation of sales prices distributed throughout the city. The higher priced clustered areas are the Center City, University City, the riverfront, and affluent pockets of the Northwest, potentially because these areas provide easy access to transit, employment centers, and cultural amenities. The northern area stretching above Broad Street into parts of West and North Philadelphia displays lower-priced homes, potentially reflecting long-term disinvestment, high vacancy rates, and aging non-renovated housing stock. The spatial clustering suggests that sale price is place-dependent in Philadelphia, mostly due to neighborhood qualities, and fixed effects.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sale Price vs structural features scatter plot\n\n# Sale Price vs. Square feet \nprice_v_sqft_plot <- ggplot(final_data, aes(x = square_feet, y = sale_price)) +\n  geom_point(alpha = 0.4, color = \"#08519C\", size = 1.3) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\", linewidth = 1) +\n  labs(title = \"Sale Price vs. Square Feet\",\n       x = \"Square Feet\",\n       y = \"Sale Price ($)\") +\n  scale_x_continuous(labels = scales::comma) +\n  scale_y_continuous(labels = scales::dollar) +\n  theme_minimal(base_size = 13) +\n  theme(\n    panel.background = element_rect(fill = \"#f5f4f0\"),\n    panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n    panel.grid.minor = element_line(color = \"gray95\", size = 0.2),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14, margin = margin(b = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n    )\n\nprice_v_sqft_plot\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-28-1.png){width=576}\n:::\n\n```{.r .cell-code}\n#ggsave(\"slide_images/price-v-sqft.png\", plot = price_v_sqft_plot, width = 6, height = 4, units = \"in\", dpi = 300)\n```\n:::\n\n\n**Sale Price vs. Square Feet**\n\nThis scatter plot highlights the importance of home size as a structural indicator of value, even though the relationship may not be linear. There is a dense concentration of homes clustered below 3,000 sq ft. and under $500,000 consistent with the sales price distribution. Here we are seeing the same strong skew to the right, displaying a relationship between the two variables. The upward trend is fairly obvious, larger homes = an increase in price, however the spread gets wider as square footage increases, indicating that while square footage is positively associated with price, the weaker relationship among larger properties suggests that additional living space contributes less to value once the home reaches a certain size category.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sale Price vs. Number of Fireplaces \n\nprice_v_fire_plot <- ggplot(final_data, aes(x = fireplace_num, y = sale_price)) +\n  geom_jitter(alpha = 0.5, color = \"#08519C\", size = 1.3, width = 0.15, height = 0) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\", linewidth = 1) +\n  labs(title = \"Sale Price vs. Number of Fireplaces\",\n       x = \"Number of Fireplaces\",\n       y = \"Sale Price ($)\") +\n  scale_x_continuous(labels = scales::comma) +\n  scale_y_continuous(labels = scales::dollar) +\n  theme_minimal(base_size = 13) +\n  theme(\n    panel.background = element_rect(fill = \"#f5f4f0\"),\n    panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n    panel.grid.minor = element_line(color = \"gray95\", size = 0.2),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14, margin = margin(b = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n    )\n\nprice_v_fire_plot\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-29-1.png){width=576}\n:::\n\n```{.r .cell-code}\n#ggsave(\"slide_images/price-v-fire.png\", plot = price_v_fire_plot, width = 6, height = 4, units = \"in\", dpi = 300)\n```\n:::\n\n\n**Sale Price vs. Number of Fireplaces**\n\nThis chart displays the positive relationship between the value of a home in relation to the quality and character of aesthetic features. Nearly all homes with no fireplaces remain in the lower-mid price range, and once a home has two or more fire places the sale price increases to a much higher range. Homes in Philadelphia with several fireplaces are usually bigger, older, homes with higher-end finishes, meaning that fireplace count can serve as a secondary and indirect indicator of several other indicators that influence home value, and this is the reason for the high level of noise on the chart.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sale Price vs. Spatial Features\n\n# Sale Price vs Distance to city center\nprice_v_spatial_plot <- ggplot(final_data, aes(x = city_dist_mi, y = sale_price)) +\n  geom_point(alpha = 0.4, color = \"#41AB5D\", size = 1.3) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\", linewidth = 1) +\n  labs(title = \"Sale Price vs. Distance to Downtown\",\n       x = \"ln Distance to City Center, mi\",\n       y = \"Sale Price\") +\n  scale_x_continuous(labels = scales::comma) +\n  scale_y_continuous(labels = scales::dollar) +\n  theme_minimal(base_size = 13) +\n  theme(\n    panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n    panel.grid.minor = element_line(color = \"gray95\", size = 0.2),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14, margin = margin(b = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n    )\n\nprice_v_spatial_plot\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n**Sale Price vs. Distance to City Center**\n\nThe plots shows a weak negative relationship between price and distance to the city center. High valued homes fall both close to downtown and well outside of it, highlighting the structure of Philadelphia’s housing market as it relates to location. It’s not a city where closer is always better, instead certain neighborhoods like chestnut hill maintain their high premiums due to neighborhood reputation, and school quality. This pattern suggests that there are many fixed affects at play here, and it is important to note that similar patterns were displayed among many spatial variables.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sale Price vs. Distance to Parks - Park Accessibility\n\nprice_v_park_plot <- ggplot(final_data, aes(x = parks_mile, y = sale_price)) +\n  geom_point(alpha = 0.4, color = \"#238B45\", size = 1.3) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"red\", linewidth = 1) +\n  labs(title = \"Sale Price vs. Distance to Nearest Park\",\n       x = \"Distance to Nearest Park (mi)\",\n       y = \"Sale Price\") +\n  scale_x_continuous(labels = scales::comma) +\n  scale_y_continuous(labels = scales::dollar) +\n  theme_minimal(base_size = 13) +\n  theme(\n    panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n    panel.grid.minor = element_line(color = \"gray95\", size = 0.2),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14, margin = margin(b = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n    )\n\nprice_v_park_plot\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n**Sale Price vs. Distance to Parks - Park Accessibility**\n\nThe plot suggests that distance to parks has very little trend with sale price. Many high-priced properties sit both very close and very far away from parks, suggesting that park accessibility alone may not hold much value. This could be correlated with the fact that some parks are major attractions; i.e Fairmount Park, while others have limited impact on neighborhood desirability, especially in areas of low investment. Because of the difference in park quality across the city, the distance metric may not represents the true relationship, and more neighborhood or amenity variables may be required to capture environmental quality more accurately.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Median income vs Sale Price per neighborhood\n\ninc_v_price_plot <- ggplot(final_data, aes(x = medhhinc, y = sale_price, color = neighborhood_fe)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(method = \"lm\", se = FALSE, color = \"black\") +\n  labs(title = \"Relationship Between Median Income and Sale Price by Neighborhood\",\n       x = \"Median Household Income ($)\",\n       y = \"Sale Price\") +\n  scale_x_continuous(labels = scales::dollar) +\n  scale_y_continuous(labels = scales::dollar) +\n  scale_color_viridis_d(option = \"turbo\") +\n  theme_minimal(base_size = 13) +\n  theme(\n    panel.grid.major = element_line(color = \"gray90\", size = 0.3),\n    panel.grid.minor = element_line(color = \"gray95\", size = 0.2),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 14, margin = margin(b = 10)),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10)),\n    legend.position = \"bottom\",\n    legend.text = element_text(size = 7),\n    legend.key.size = unit(0.4, \"cm\"),\n    legend.box = \"horizontal\"\n    ) +\n  guides(color = guide_legend(ncol = 8, byrow = TRUE))\n\ninc_v_price_plot\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-32-1.png){width=1440}\n:::\n:::\n\n\n**Median Income vs Sale Price per neighborhood**\n\nThis plot further advances the claim that even with a lot of scatter in the points, there is a noticeable upward trend of homes in higher-income neighborhoods selling for higher prices. Many of the neighborhoods cluster in specific ranges of the price scale, even when income levels are similar, suggesting that the  housing market in Philadelphia is dependent not only on demographics or income, but place effects, where reputation or fixed effects in a neighborhood increase or reduce prices. An example of this is some neighborhoods with moderate household incomes still show clusters of high-value transactions, while others with similar incomes remain in the lower end of the market, again highlighting other factors and fixed effects like transit access, historical character, and school quality. The main takeaway is that while higher-income neighborhood tend to have homes with higher sale prices, neighborhood identity also plays a big role in sale price.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Spatial Relationship Between sale price and structural predictors\n\ntmap_mode(\"plot\")\n\n# Sale Price\nmap_value <- tm_shape(philly_tracts[philly_tracts$COUNTYFP == 101, ]) +\n  tm_polygons(col = \"gray90\", border.col = \"gray45\", lwd = 0.5) +\n  tm_shape(final_data) +\n  tm_dots(col = \"sale_price\",\n          palette = \"YlOrRd\",\n          style = \"quantile\",\n          size = 0.04,\n          title = \"Sale Price\") +\n  tm_layout(main.title = \"Distribution of Sale Prices\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.outside = TRUE,\n            frame = FALSE)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Bathrooms Predictor\n\nmap_bath <-  tm_shape(philly_tracts[philly_tracts$COUNTYFP == 101, ]) +\n  tm_polygons(col = \"gray90\", border.col = \"gray45\", lwd = 0.5) +\n  tm_shape(final_data) +\n  tm_dots(col = \"bath_num\",\n          palette = \"Blues\",\n          style = \"quantile\",\n          size = 0.04,\n          title = \"Number of Bathrooms\") +\n  tm_layout(main.title = \"Distribution of Bathrooms\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.outside = TRUE,\n            frame = FALSE)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Stories Predictor\n\nmap_story <-  tm_shape(philly_tracts[philly_tracts$COUNTYFP == 101, ]) +\n  tm_polygons(col = \"gray90\", border.col = \"gray45\", lwd = 0.5) +\n  tm_shape(final_data) +\n  tm_dots(col = \"story_num\",\n          palette = \"Greens\",\n          style = \"quantile\",\n          size = 0.04,\n          title = \"Number of Stories\") +\n  tm_layout(main.title = \"Distribution of Stories\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.outside = TRUE,\n            frame = FALSE)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Display them side by side\n\ntmap_arrange(map_value, map_bath, map_story, ncol = 3)\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-36-1.png){width=960}\n:::\n\n```{.r .cell-code}\nmap_struct <- tmap_arrange(map_value, map_bath, map_story, ncol = 3)\n```\n:::\n\n\n**Spatial Relationship Between sale price and structural predictors (bathrooms and stories) - Map**\n\nThis figure shows how housing characteristics are clustered across Philadelphia. Here we can see the sale price distribution directly against certain structural features. Bathrooms and number of stories follow similar geographic patterns, as sale price, areas with higher sales prices tend to have bigger homes with more bathrooms and more stories. In contrast, neighborhoods where homes have less structural amenities also have subsequently lower sale prices. This group of maps makes a strong visual argument that structural features and neighborhood context evolve together, supporting the modeling strategy of incorporating more structural than spatial predictors.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Sale price histogram.\nprice_hist <- ggplot(residential_points, aes(x = sale_price)) +\n  geom_histogram(fill = \"pink\", color = \"white\") +\n  labs(title = \"Histogram of Sale Price\", x = \"Sale Price ($)\", y = \"Count\") +\n  theme_minimal()\n\n# Log sale price histogram.\nln_price_hist <- ggplot(residential_points, aes(x = ln_sale_price)) +\n  geom_histogram(fill = \"pink\", color = \"white\") +\n  labs(title = \"Histogram of ln(Sale Price)\", x = \"ln(Sale Price)\", y = \"Count\") +\n  theme_minimal()\n\ngrid.arrange(price_hist, ln_price_hist, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\nThe raw distribution of sale prices is right-skewed with a median of 250,000 USD and a mean of 343,867 USD. There is a substantial gap in price between the third quartile (375,000 USD) and the maximum price (15,428,633 USD). While 75% of houses sold for 375,000 USD or less, the upper 25% exhibits considerable variability, with prices ranging up to 15.4 million USD, affecting the tail distribution. This suggests that a small number of luxury properties are affecting the distribution of the sales price data To address this skewness and improve model performance, we performed a log transformation, making our data closer to normal by compressing the scale of higher values, emphasizing a standardized change in percentage over dollar amount.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Livable space histogram.\nlivable_area_hist <- ggplot(residential_points, aes(x = square_feet)) +\n  geom_histogram(fill = \"wheat\", color = \"white\") +\n  labs(title = \"Histogram of Square Feet\", x = \"Square Feet\", y = \"Count\") +\n  theme_minimal()\n\n# Log livable space histogram.\nln_square_feet_hist <- ggplot(residential_points, aes(x = ln_square_feet)) +\n  geom_histogram(fill = \"wheat\", color = \"white\") +\n  labs(title = \"Histogram of ln(Square Feet)\", x = \"ln(Square Feet)\", y = \"Count\") +\n  theme_minimal()\n\ngrid.arrange(livable_area_hist, ln_square_feet_hist, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\nThe distribution of livable area is right-skewed, with a median of 1,216 sq ft and a mean of 1,372 sq ft. While 75% of homes are under 1,509 sq ft, a small number of larger properties extend the upper tail of the distribution. Notably, homes above 3,000 sq ft become increasingly sparse, suggesting a separation between standard and luxury housing markets. We applied a log transformation to this variable to create a more symmetric distribution by compressing the scale of larger homes, which improves linearity in our model and allows coefficients to represent proportional rather than absolute changes in square footage.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Distance to downtown histogram.\ndowntown_dist_hist <- ggplot(residential_points, aes(x = city_dist_mi)) +\n  geom_histogram(fill = \"darkblue\", color = \"white\") +\n  labs(title = \"Histogram of Downtown Distance\", x = \"Downtown Distance (mi)\", y = \"Count\") +\n  theme_minimal()\n\n# Log distance to downtown histogram.\nln_downtown_dist_hist <- ggplot(residential_points, aes(x = ln_city_dist)) +\n  geom_histogram(fill = \"darkblue\", color = \"white\") +\n  labs(title = \"Histogram of ln(Downtown Distance)\", x = \"ln(Downtown Distance)\", y = \"Count\") +\n  theme_minimal()\n\ngrid.arrange(downtown_dist_hist, ln_downtown_dist_hist, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\nThe distribution of distance to Center City (City Hall) is right-skewed, with fewer observations of houses occurring as the distance from Center City/City Hall increases. The effect of distance on housing prices is non-linear: being 1 mile from Center City has a larger impact on price than being 6 vs. 11 miles out. To account for this, we applied a log transformation, which compresses the upper tail, creates a more symmetric distribution, and reduces the influence of extreme distances. This transformation improves linearity in our regression model and allows coefficients to be interpreted as proportional changes in price per proportional change in distance.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# SEPTA buffer histogram.\nsepta_buffer_hist <- ggplot(residential_points, aes(x = septa_half_mi)) +\n  geom_histogram(fill = \"azure3\", color = \"white\") +\n  labs(title = \"Histogram of SEPTA 0.5mi Buffer\", x = \"SEPTA 0.5mi Buffer (mi)\", y = \"Count\") +\n  theme_minimal()\n\n# Log SEPTA buffer histogram.\nln_septa_buffer_hist <- ggplot(residential_points, aes(x = ln_septa_half_mi)) +\n  geom_histogram(fill = \"azure3\", color = \"white\") +\n  labs(title = \"Histogram of ln(SEPTA 0.5mi Buffer)\", x = \"ln(SEPTA 0.5mi Buffer)\", y = \"Count\") +\n  theme_minimal()\n\ngrid.arrange(septa_buffer_hist, ln_septa_buffer_hist, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\nThe distribution of SEPTA access within a 0.5-mile buffer of each property is right-skewed, with a median of 44 and a mean of 52.5. While most properties have between 29 and 69 nearby SEPTA access points, there is substantial variation ranging from zero (likely remote suburban properties) to over 160 in the most transit-dense neighborhoods. The log transformation compresses this wide range and produces a more symmetric distribution, which is appropriate given that transit accessibility exhibits diminishing returns—the marginal benefit of additional access decreases as the total number increases.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# kNN amenities histogram.\nknn_amenities_hist <- ggplot(residential_points, aes(x = knn_amenity_mi)) +\n  geom_histogram(fill = \"darkseagreen\", color = \"white\") +\n  labs(title = \"Histogram of kNN Amenities\", x = \"kNN Amenities (mi)\", y = \"Count\") +\n  theme_minimal()\n\ngrid.arrange(knn_amenities_hist)\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\nFor the kNN Amenities variable, the mean distance to the nearest amenity per household is 0.31 miles, and the median is 0.27 miles. Seventy-five percent of households are within 0.42 miles of any of the 23 amenities described in the data cleaning section. These statistics showcase Philadelphia’s reputation as a highly walkable city. Observations beyond 1 mile typically reflect suburban or rural settings. We did not transform this variable, instead using the raw distances to preserve the direct relationship between amenity proximity and property values.The kNN approach inherently reflects local amenity density, with shorter distances in denser areas and longer distances where households are more dispersed.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Distance to park histogram..\nparks_dist <- ggplot(residential_points, aes(x = parks_mile)) +\n  geom_histogram(fill = \"darkgreen\", color = \"white\") +\n  labs(title = \"Histogram of Parks Distance\", x = \"Parks Distance (mi)\", y = \"Count\") +\n  theme_minimal()\n\n# Log distance to park histogram.\nln_parks_dist <- ggplot(residential_points, aes(x = ln_park_dist)) +\n  geom_histogram(fill = \"darkgreen\", color = \"white\") +\n  labs(title = \"Histogram of ln(Parks Distance)\", x = \"Parks Distance\", y = \"Count\") +\n  theme_minimal()\n\ngrid.arrange(parks_dist, ln_parks_dist, ncol = 2)\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\nThe distribution of the variable Distance from Parks by miles is showing a slight right skew. Between the third quartile and the maximum there is a jump of about 3 miles, indicating outliers beyond 2 miles. Due to this, we chose to log the variable to ensure it is normal for our model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of bathrooms histogram.\nggplot(residential_points, aes(x = bath_num)) +\n  geom_histogram(fill = \"gold\", color = \"white\") +\n  labs(title = \"Histogram of Bathrooms\", x = \"Bathrooms\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\nThe histogram showcases the number of observations of properties with n bathrooms. Most observations exhibit 1 or 2 bathrooms per property, with a an outlier of 8 bathrooms.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of fireplaces histogram.\nggplot(residential_points, aes(x = fireplace_num)) +\n  geom_histogram(fill = \"darkred\", color = \"white\") +\n  labs(title = \"Histogram of Fireplaces\", x = \"Fireplaces\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\nThis histogram showcases the number of observations with n fireplaces. Most observations contain 0 fireplaces, with outliers of property(ies) containing 2 or more.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of garages histogram.\nggplot(residential_points, aes(x = garage_num)) +\n  geom_histogram(fill = \"gray\", color = \"white\") +\n  labs(title = \"Histogram of Garages\", x = \"Garages\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\nThis histogram showcases the number of garages available per observation. The median is 0 garages per property, with a maximum of 5 garages per property.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Number of stories histogram.\nggplot(residential_points, aes(x = story_num)) +\n  geom_histogram(fill = \"orange\", color = \"white\") +\n  labs(title = \"Histogram of Stories\", x = \"Stories\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::\n\n\nThis histogram showcases the number of observations that contain n housing stories. The median is 2 stories per property, with a maximum of 5 stories.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Age histogram.\nggplot(residential_points, aes(x = age)) +\n  geom_histogram(fill = \"black\", color = \"white\") +\n  labs(title = \"Histogram of Age\", x = \"Age\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-47-1.png){width=672}\n:::\n:::\n\n\nThis histogram showcases the amount of observations with their calculated ages (years) based off year built. The median age is 100 years, and the maximum is 275 years. This was then transformed into a polynomial variable to account for the decrease in housing price as the home ages until a certain age, then the price rises again.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram for pct_poverty\nggplot(philly_acs_summary, aes(x = pct_poverty)) +\n  geom_histogram(fill = \"skyblue\", color = \"white\") +\n  labs(title = \"Histogram of Percent Poverty\", x = \"Percent Poverty (%)\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-48-1.png){width=672}\n:::\n:::\n\n\nThis histogram presents the tracts with their determined percent poverty. The percentage is suspiciously high with the range from the minimum (0%) from the first quartile is 98 percent.We also have 32 tracts with no data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram for pct_bach\nggplot(philly_acs_summary, aes(x = pct_bach)) +\n  geom_histogram(binwidth = 5, fill = \"lightgreen\", color = \"white\") +\n  labs(title = \"Histogram of Percent Bachelor Degree Holders\", x = \"Percent Bachelor Degree Holders (%)\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-49-1.png){width=672}\n:::\n:::\n\n\nThis histogram shows the distribution of percent of bachelor + degree holders per census tract. The median is 13.5 %, with most tracts falling between the minimum and third quartile. We also have 32 tracts with no data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram for pct_vacant\nggplot(philly_acs_summary, aes(x = pct_vacant)) +\n  geom_histogram(binwidth = 10, fill = \"salmon\", color = \"white\") +\n  labs(title = \"Histogram of Percent Vacant Units\", x = \"Percent Vacant (%)\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-50-1.png){width=672}\n:::\n:::\n\n\nThis histogram shows the distribution of percent vacant residences within the census tracts. The median percentage of vacant homes is 8 percent. We also have 44 tracts with no data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram for pct_single_family\nggplot(philly_acs_summary, aes(x = pct_single_family)) +\n  geom_histogram(binwidth = 5, fill = \"orange\", color = \"white\") +\n  labs(title = \"Histogram of Percent Single-Family Homes \", x = \"Percent Single-Family (%)\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-51-1.png){width=672}\n:::\n:::\n\n\nThis histogram represents the percent of single families per tract. The median for percent single families per tract is 66.58%. We also have 45 tracts with no data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Histogram for medhhinc\nggplot(philly_acs_summary, aes(x = medhhinc)) +\n  geom_histogram(binwidth = 10000, fill = \"purple\", color = \"white\") +\n  labs(title = \"Histogram of Median Household Income\", x = \"Median Household Income ($)\", y = \"Count\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-52-1.png){width=672}\n:::\n:::\n\n\nThis histogram represents the median household income value per census tract. The median of the median household income value is $66,795. Slightly right-skewed. We also have 32 tracts with no data.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Residential property correlation.\ncorr_matrix_df <- final_data %>%\n  select(1:22) %>%\n  st_drop_geometry()\n\ncorr_matrix <- round(cor(na.omit(corr_matrix_df)), 2)\n\ncorr_matrix_plot <- ggcorrplot(corr_matrix,\n                               title = \"Correlation Matrix\",\n                               hc.order = FALSE,\n                               method = \"square\",\n                               lab = TRUE,\n                               lab_size = 3,\n                               colors = c(\"#6D9EC1\", \"white\", \"#E46726\"),\n                               ggtheme = ggplot2::theme_gray,\n                               insig = \"blank\"\n                               )\n\ncorr_matrix_plot\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-53-1.png){width=960}\n:::\n\n```{.r .cell-code}\n#ggsave(\"correlation_matrix.png\", width = 8, height = 8, dpi = 400)\n```\n:::\n\n\n5 strongest correlations to price:\n\n- square feet\n\n- bathrooms\n\n- median income\n\n- percent bachelor's\n\n- fireplaces\n\nSeems like bachelor degrees are highly correlated with median income, and should be excluded as a predictor.\n\n# Model Building\n\n## Model Building Progression\n\n**Check for multicollinearity:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# VIF check for multicollinearity.\nvif_check <- lm(ln_sale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + story_num  + garage_num + ln_septa_half_mi + ln_park_dist + ln_city_dist + basement_type + fuel_type, data = residential_points)\n\nvif(vif_check)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                     GVIF Df GVIF^(1/(2*Df))\nln_square_feet   2.135764  1        1.461425\nbath_num         1.898126  1        1.377725\nac_binary        1.326611  1        1.151786\nfireplace_num    1.254647  1        1.120110\nstory_num        1.480500  1        1.216758\ngarage_num       2.278251  1        1.509387\nln_septa_half_mi 3.022487  1        1.738530\nln_park_dist     1.042356  1        1.020958\nln_city_dist     3.366197  1        1.834720\nbasement_type    3.098173 10        1.058170\nfuel_type        1.050158  3        1.008190\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build Model step by step\n# First Model (structural features only)\n\nfirst_model <- lm(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2), # Age polynomial.\n                    data = final_data)\n\nsummary(first_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = sale_price ~ ln_square_feet + bath_num + ac_binary + \n    fireplace_num + story_num + garage_num + basement_type + \n    fuel_type + age + I(age^2), data = final_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-948550  -77612  -12427   56061 4967680 \n\nCoefficients:\n                                          Estimate    Std. Error t value\n(Intercept)                          -1573115.2430    47184.2963 -33.340\nln_square_feet                         265324.4547     6777.4520  39.148\nbath_num                                50976.0380     2850.5451  17.883\nac_binary                               93358.6805     3519.3817  26.527\nfireplace_num                          139754.2587     4574.3312  30.552\nstory_num                               36185.3161     3367.8324  10.744\ngarage_num                              73507.4314     4149.3241  17.716\nbasement_typeFull Finished             -53619.3219    10227.7625  -5.243\nbasement_typeFull Semi-Finished        -64747.7385    11812.4468  -5.481\nbasement_typeFull Unfinished           -69284.7145    10632.8706  -6.516\nbasement_typeFull Unknown Finish       -85987.4342    10988.0644  -7.826\nbasement_typePartial Finished         -119781.8006    10844.6785 -11.045\nbasement_typePartial Semi-Finished    -130192.6848    11305.7582 -11.516\nbasement_typePartial Unfinished       -124518.1899    13722.2343  -9.074\nbasement_typePartial Unknown Finish   -131660.7994    13342.8310  -9.868\nbasement_typeUnknown Size Finished      64719.7760    49966.7638   1.295\nbasement_typeUnknown Size Unfinished   -25066.6493    38151.1732  -0.657\nfuel_typeElectric                      -10365.3404    10223.5159  -1.014\nfuel_typeOil Heat                       -2321.1682    20691.7649  -0.112\nfuel_typeOther                         261307.5132    62624.4546   4.173\nage                                     -4531.8642      146.4668 -30.941\nI(age^2)                                   26.6178        0.8083  32.929\n                                                 Pr(>|t|)    \n(Intercept)                          < 0.0000000000000002 ***\nln_square_feet                       < 0.0000000000000002 ***\nbath_num                             < 0.0000000000000002 ***\nac_binary                            < 0.0000000000000002 ***\nfireplace_num                        < 0.0000000000000002 ***\nstory_num                            < 0.0000000000000002 ***\ngarage_num                           < 0.0000000000000002 ***\nbasement_typeFull Finished            0.00000016071883817 ***\nbasement_typeFull Semi-Finished       0.00000004295551073 ***\nbasement_typeFull Unfinished          0.00000000007465800 ***\nbasement_typeFull Unknown Finish      0.00000000000000542 ***\nbasement_typePartial Finished        < 0.0000000000000002 ***\nbasement_typePartial Semi-Finished   < 0.0000000000000002 ***\nbasement_typePartial Unfinished      < 0.0000000000000002 ***\nbasement_typePartial Unknown Finish  < 0.0000000000000002 ***\nbasement_typeUnknown Size Finished                  0.195    \nbasement_typeUnknown Size Unfinished                0.511    \nfuel_typeElectric                                   0.311    \nfuel_typeOil Heat                                   0.911    \nfuel_typeOther                        0.00003029641753816 ***\nage                                  < 0.0000000000000002 ***\nI(age^2)                             < 0.0000000000000002 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 176400 on 13861 degrees of freedom\nMultiple R-squared:  0.5896,\tAdjusted R-squared:  0.5889 \nF-statistic: 948.1 on 21 and 13861 DF,  p-value: < 0.00000000000000022\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build Model step by step\n# Second Model (structural features + census features)\n\nsecond_model <- lm(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family, # Census feature.\n                    data = final_data)\n\nsummary(second_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = sale_price ~ ln_square_feet + bath_num + ac_binary + \n    fireplace_num + story_num + garage_num + basement_type + \n    fuel_type + age + I(age^2) + medhhinc + pct_vacant + pct_single_family, \n    data = final_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-988077  -66190   -4479   51392 5089350 \n\nCoefficients:\n                                           Estimate     Std. Error t value\n(Intercept)                          -1631653.69177    43478.62618 -37.528\nln_square_feet                         249024.29196     6287.93299  39.604\nbath_num                                57294.02210     2625.66512  21.821\nac_binary                               51858.97037     3354.26227  15.461\nfireplace_num                          123699.62363     4248.12112  29.119\nstory_num                                8121.18745     3187.48631   2.548\ngarage_num                              78147.86081     3858.85587  20.252\nbasement_typeFull Finished             -11441.07419     9433.38338  -1.213\nbasement_typeFull Semi-Finished        -28190.97570    10881.72867  -2.591\nbasement_typeFull Unfinished           -26373.93425     9803.25374  -2.690\nbasement_typeFull Unknown Finish       -35981.99248    10140.98926  -3.548\nbasement_typePartial Finished          -81503.33848    10010.20710  -8.142\nbasement_typePartial Semi-Finished     -80042.76840    10459.75246  -7.652\nbasement_typePartial Unfinished        -73358.61614    12658.62517  -5.795\nbasement_typePartial Unknown Finish    -84936.85419    12306.96737  -6.902\nbasement_typeUnknown Size Finished     100022.70014    45911.66164   2.179\nbasement_typeUnknown Size Unfinished    18865.34248    35068.79357   0.538\nfuel_typeElectric                        3565.49288     9416.44401   0.379\nfuel_typeOil Heat                       -9369.15017    19014.09219  -0.493\nfuel_typeOther                         149197.56776    57590.28952   2.591\nage                                     -3249.53619      137.00469 -23.718\nI(age^2)                                   20.10269        0.75712  26.552\nmedhhinc                                    2.64611        0.05506  48.061\npct_vacant                                383.54766      219.97666   1.744\npct_single_family                       -1835.25686      167.77302 -10.939\n                                                 Pr(>|t|)    \n(Intercept)                          < 0.0000000000000002 ***\nln_square_feet                       < 0.0000000000000002 ***\nbath_num                             < 0.0000000000000002 ***\nac_binary                            < 0.0000000000000002 ***\nfireplace_num                        < 0.0000000000000002 ***\nstory_num                                        0.010850 *  \ngarage_num                           < 0.0000000000000002 ***\nbasement_typeFull Finished                       0.225216    \nbasement_typeFull Semi-Finished                  0.009589 ** \nbasement_typeFull Unfinished                     0.007147 ** \nbasement_typeFull Unknown Finish                 0.000389 ***\nbasement_typePartial Finished        0.000000000000000422 ***\nbasement_typePartial Semi-Finished   0.000000000000021017 ***\nbasement_typePartial Unfinished      0.000000006974481709 ***\nbasement_typePartial Unknown Finish  0.000000000005368236 ***\nbasement_typeUnknown Size Finished               0.029379 *  \nbasement_typeUnknown Size Unfinished             0.590619    \nfuel_typeElectric                                0.704957    \nfuel_typeOil Heat                                0.622199    \nfuel_typeOther                                   0.009589 ** \nage                                  < 0.0000000000000002 ***\nI(age^2)                             < 0.0000000000000002 ***\nmedhhinc                             < 0.0000000000000002 ***\npct_vacant                                       0.081254 .  \npct_single_family                    < 0.0000000000000002 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 162000 on 13858 degrees of freedom\nMultiple R-squared:  0.6538,\tAdjusted R-squared:  0.6532 \nF-statistic:  1091 on 24 and 13858 DF,  p-value: < 0.00000000000000022\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build Model step by step\n# Third Model (structural features + census features + spatial features)\n\nthird_model <- lm(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family + # Census feature.\n                    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi, # Spatial \n                    data = final_data)\n\nsummary(third_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = sale_price ~ ln_square_feet + bath_num + ac_binary + \n    fireplace_num + story_num + garage_num + basement_type + \n    fuel_type + age + I(age^2) + medhhinc + pct_vacant + pct_single_family + \n    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi, \n    data = final_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-817667  -62638   -2348   51585 5096901 \n\nCoefficients:\n                                          Estimate    Std. Error t value\n(Intercept)                          -1755937.2954    42209.8105 -41.600\nln_square_feet                         259188.8862     6030.4108  42.980\nbath_num                                51003.1282     2524.1100  20.206\nac_binary                               46002.9566     3224.9122  14.265\nfireplace_num                          127882.4271     4065.5162  31.455\nstory_num                               -3293.9735     3080.5023  -1.069\ngarage_num                              87635.7897     3702.7940  23.667\nbasement_typeFull Finished               9025.2270     9060.4446   0.996\nbasement_typeFull Semi-Finished          -655.1732    10446.8183  -0.063\nbasement_typeFull Unfinished            -6175.5266     9422.9158  -0.655\nbasement_typeFull Unknown Finish       -15053.7679     9744.2956  -1.545\nbasement_typePartial Finished          -37741.0741     9667.9264  -3.904\nbasement_typePartial Semi-Finished     -34526.5862    10142.6823  -3.404\nbasement_typePartial Unfinished        -43195.2313    12139.1172  -3.558\nbasement_typePartial Unknown Finish    -52068.7616    11806.6007  -4.410\nbasement_typeUnknown Size Finished     125455.6640    43907.0332   2.857\nbasement_typeUnknown Size Unfinished    36845.8296    33537.6606   1.099\nfuel_typeElectric                        2967.6188     9004.5144   0.330\nfuel_typeOil Heat                        -796.3198    18184.1313  -0.044\nfuel_typeOther                         104285.2749    55084.8694   1.893\nage                                     -2593.0061      132.4070 -19.584\nI(age^2)                                   14.7489        0.7398  19.935\nmedhhinc                                    2.1122        0.0560  37.717\npct_vacant                              -1163.6035      224.4922  -5.183\npct_single_family                         724.0007      182.9895   3.957\ncity_dist_mi                            -2507.4907      766.2599  -3.272\nsepta_half_mi                            1848.1046       70.2789  26.297\nln_park_dist                           -16888.4011     2091.3400  -8.075\nknn_amenity_mi                         -12260.4575     8546.2417  -1.435\n                                                 Pr(>|t|)    \n(Intercept)                          < 0.0000000000000002 ***\nln_square_feet                       < 0.0000000000000002 ***\nbath_num                             < 0.0000000000000002 ***\nac_binary                            < 0.0000000000000002 ***\nfireplace_num                        < 0.0000000000000002 ***\nstory_num                                        0.284954    \ngarage_num                           < 0.0000000000000002 ***\nbasement_typeFull Finished                       0.319213    \nbasement_typeFull Semi-Finished                  0.949994    \nbasement_typeFull Unfinished                     0.512238    \nbasement_typeFull Unknown Finish                 0.122398    \nbasement_typePartial Finished        0.000095166072865703 ***\nbasement_typePartial Semi-Finished               0.000666 ***\nbasement_typePartial Unfinished                  0.000374 ***\nbasement_typePartial Unknown Finish  0.000010408240366613 ***\nbasement_typeUnknown Size Finished               0.004279 ** \nbasement_typeUnknown Size Unfinished             0.271944    \nfuel_typeElectric                                0.741730    \nfuel_typeOil Heat                                0.965071    \nfuel_typeOther                                   0.058355 .  \nage                                  < 0.0000000000000002 ***\nI(age^2)                             < 0.0000000000000002 ***\nmedhhinc                             < 0.0000000000000002 ***\npct_vacant                           0.000000221096385096 ***\npct_single_family                    0.000076430420795608 ***\ncity_dist_mi                                     0.001069 ** \nsepta_half_mi                        < 0.0000000000000002 ***\nln_park_dist                         0.000000000000000728 ***\nknn_amenity_mi                                   0.151423    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 154900 on 13854 degrees of freedom\nMultiple R-squared:  0.6837,\tAdjusted R-squared:  0.6831 \nF-statistic:  1069 on 28 and 13854 DF,  p-value: < 0.00000000000000022\n```\n\n\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Build Model step by step\n# Final Model \n## (structural features + census features + spatial features + interactions and fixed effects)\n\nfinal_model <- lm(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family + # Census feature.\n                    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi + # Spatial \n                    knn_amenity_mi * city_dist_mi + septa_half_mi * city_dist_mi + # Interaction between amenities and downtown distance.\n                    neighborhood_fe + quarters_fe, # Fixed effect \n                    data = final_data)\n\nsummary(final_model)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\nCall:\nlm(formula = sale_price ~ ln_square_feet + bath_num + ac_binary + \n    fireplace_num + story_num + garage_num + basement_type + \n    fuel_type + age + I(age^2) + medhhinc + pct_vacant + pct_single_family + \n    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi + \n    knn_amenity_mi * city_dist_mi + septa_half_mi * city_dist_mi + \n    neighborhood_fe + quarters_fe, data = final_data)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-798051  -47316    2231   44345 5123884 \n\nCoefficients:\n                                                 Estimate     Std. Error\n(Intercept)                                -1657940.22470    45493.46650\nln_square_feet                               261653.15436     5664.41060\nbath_num                                      43843.65408     2308.64344\nac_binary                                     38117.05447     3019.61163\nfireplace_num                                 88491.39266     3861.20497\nstory_num                                     -3914.30380     2936.48610\ngarage_num                                    77030.43653     3411.56673\nbasement_typeFull Finished                   101483.65131     8830.21379\nbasement_typeFull Semi-Finished               92361.27832     9993.78345\nbasement_typeFull Unfinished                  81610.24126     9130.96925\nbasement_typeFull Unknown Finish              72063.11376     9381.23915\nbasement_typePartial Finished                 49757.63088     9336.90901\nbasement_typePartial Semi-Finished            45706.97947     9840.50165\nbasement_typePartial Unfinished               38542.17995    11431.04311\nbasement_typePartial Unknown Finish           32484.57614    11155.03267\nbasement_typeUnknown Size Finished           168383.76890    39699.41756\nbasement_typeUnknown Size Unfinished         130060.38774    30365.34179\nfuel_typeElectric                             -9782.82669     8165.97207\nfuel_typeOil Heat                              3778.65607    16324.04269\nfuel_typeOther                                 8483.98198    49580.06057\nage                                           -1482.81195      130.24128\nI(age^2)                                          5.87768        0.74553\nmedhhinc                                          0.62950        0.08448\npct_vacant                                    -1005.64567      291.81015\npct_single_family                               219.33928      214.90003\ncity_dist_mi                                  -4819.21361     3219.40481\nsepta_half_mi                                  1424.38286      194.01801\nln_park_dist                                  -6234.17054     4838.09208\nknn_amenity_mi                               -20833.95786    24021.24910\nneighborhood_feAcademy Gardens                37183.75011    29063.24192\nneighborhood_feAllegheny West                -81178.66645    19747.80365\nneighborhood_feAndorra                       -36899.86992    30639.87807\nneighborhood_feAston-Woodbridge               37471.10986    33193.50178\nneighborhood_feBella Vista                    90030.05119    24534.03655\nneighborhood_feBelmont                       -73260.20102    41183.35267\nneighborhood_feBrewerytown                   -70887.58170    18851.85190\nneighborhood_feBridesburg                      8200.62849    22173.10061\nneighborhood_feBurholme                      -11020.59219    36141.98192\nneighborhood_feBustleton                      26845.36972    24665.90193\nneighborhood_feCarroll Park                  -79485.63764    20533.40133\nneighborhood_feCedar Park                     50903.74805    21594.31513\nneighborhood_feCedarbrook                    -18733.12094    23527.99233\nneighborhood_feChestnut Hill                 405617.68702    20989.45599\nneighborhood_feClearview                     -84924.33030    32006.87846\nneighborhood_feCobbs Creek                   -77562.70250    16239.01668\nneighborhood_feDickinson Narrows             -46228.73425    20672.82929\nneighborhood_feDunlap                       -149077.53577    34850.29349\nneighborhood_feEast Germantown               -55725.61363    22284.70084\nneighborhood_feEast Kensington               -24931.83758    18649.97574\nneighborhood_feEast Mount Airy               -39672.38823    18326.30068\nneighborhood_feEast Oak Lane                -110720.66613    29189.26470\nneighborhood_feEast Parkside                 -96875.29736    43009.02090\nneighborhood_feEast Passyunk                  18548.68326    19771.17863\nneighborhood_feEastwick                      -65187.86687    34422.87528\nneighborhood_feElmwood                       -65408.97379    18135.99045\nneighborhood_feFairhill                      -71704.26714    37417.40279\nneighborhood_feFairmount                      79935.76169    18138.51850\nneighborhood_feFeltonville                   -64193.35248    19842.10485\nneighborhood_feFern Rock                     -80858.30468    34391.53574\nneighborhood_feFishtown - Lower Kensington     9753.74777    15479.96362\nneighborhood_feFitler Square                 433898.63083    30666.44346\nneighborhood_feFox Chase                      -1191.12744    21434.30138\nneighborhood_feFrancisville                  -55199.70458    23448.72689\nneighborhood_feFrankford                     -65752.33751    18632.41316\nneighborhood_feFranklinville                -135326.00022    29388.65347\nneighborhood_feGermantown - Morton           -73568.42918    26505.05993\nneighborhood_feGermantown - Penn Knox       -136518.39681    44353.19600\nneighborhood_feGermantown - Westside         -98563.13632    39334.28353\nneighborhood_feGermany Hill                   10231.17331    26115.45737\nneighborhood_feGirard Estates                -30603.49061    18939.42860\nneighborhood_feGlenwood                     -119474.06331    28556.83370\nneighborhood_feGraduate Hospital              97520.93433    19973.04887\nneighborhood_feGrays Ferry                   -75481.41036    17444.55221\nneighborhood_feGreenwich                     -64175.19929    25230.25907\nneighborhood_feHaddington                    -91270.64590    18398.19928\nneighborhood_feHarrowgate                    -62121.18902    18977.91421\nneighborhood_feHartranft                    -131582.73560    22639.15057\nneighborhood_feHawthorne                      13169.95713    28842.84687\nneighborhood_feHolmesburg                    -17670.00910    20551.32095\nneighborhood_feHunting Park                  -53147.58934    22061.51403\nneighborhood_feJuniata Park                  -49408.97887    17918.47259\nneighborhood_feKingsessing                  -100245.71687    17213.22477\nneighborhood_feLawndale                      -38945.07939    17685.32938\nneighborhood_feLexington Park                 23243.39571    28523.99591\nneighborhood_feLogan                        -102555.05340    19864.76119\nneighborhood_feLogan Square                  379046.61233    30173.19574\nneighborhood_feLower Moyamensing             -65365.63965    17491.07739\nneighborhood_feManayunk                       28356.63404    18199.96310\nneighborhood_feMantua                        -92910.84396    27416.06170\nneighborhood_feMayfair                       -11299.33352    18328.17970\nneighborhood_feMelrose Park Gardens          -68278.66749    32017.80130\nneighborhood_feMill Creek                   -108864.06595    26183.51708\nneighborhood_feMillbrook                      15534.97223    30551.88468\nneighborhood_feModena                         55854.04856    28537.16201\nneighborhood_feMorrell Park                   25251.89869    27932.79846\nneighborhood_feNewbold                       -54636.97578    21808.17215\nneighborhood_feNicetown                      -66893.42947    36298.67571\nneighborhood_feNormandy Village              155197.36009    49122.79282\nneighborhood_feNorth Central                -101900.04242    22183.92696\nneighborhood_feNorthern Liberties              2692.49730    19255.79096\nneighborhood_feNorthwood                     -96763.98083    23348.68911\nneighborhood_feOgontz                        -38842.22862    20138.09837\nneighborhood_feOld City                      443334.48569    45204.28297\nneighborhood_feOld Kensington                -46454.88136    20353.62973\nneighborhood_feOlney                         -68389.05352    17153.25904\nneighborhood_feOverbrook                     -93077.05144    16987.27692\nneighborhood_feOxford Circle                 -22701.66053    17820.65848\nneighborhood_fePacker Park                     9689.89314    25692.21263\nneighborhood_feParkwood Manor                 51865.84423    29534.39315\nneighborhood_fePaschall                      -77498.68652    19758.48273\nneighborhood_fePassyunk Square                 4243.48331    20608.82553\nneighborhood_fePennsport                     -32232.31694    19668.11315\nneighborhood_fePennypack                       -229.17130    23906.35132\nneighborhood_fePennypack Woods                10601.67627    46721.77819\nneighborhood_fePenrose                       -58590.52553    30805.52778\nneighborhood_fePoint Breeze                  -63076.08386    17718.03825\nneighborhood_feQueen Village                 110051.36389    21297.63346\nneighborhood_feRhawnhurst                     13210.76897    21751.53460\nneighborhood_feRichmond                      -28186.33567    15369.92197\nneighborhood_feRittenhouse                   428527.90443    26394.39500\nneighborhood_feRoxborough                     10264.37966    16135.89529\nneighborhood_feRoxborough Park               -33966.75004    32811.40721\nneighborhood_feSharswood                     -96773.71513    41275.66768\nneighborhood_feSociety Hill                  350959.85928    26133.87223\nneighborhood_feSomerton                       57933.82996    29085.20858\nneighborhood_feSouthwest Germantown         -105279.23491    24716.20835\nneighborhood_feSouthwest Schuylkill          -90431.06270    20983.94325\nneighborhood_feSpring Garden                 178866.21603    25856.32707\nneighborhood_feSpruce Hill                   134662.38807    30063.65847\nneighborhood_feStadium District              -23294.11604    21985.18636\nneighborhood_feStanton                      -147735.64393    20701.69637\nneighborhood_feStrawberry Mansion           -107463.96962    20368.92240\nneighborhood_feSummerdale                    -40151.90279    21740.17259\nneighborhood_feTacony                        -38167.86864    19893.82475\nneighborhood_feTioga                        -119532.35201    23356.75045\nneighborhood_feTorresdale                    -23879.53124    27055.42084\nneighborhood_feUpper Kensington              -95731.86958    18344.45529\nneighborhood_feUpper Roxborough              -38230.35488    20207.99113\nneighborhood_feWalnut Hill                   -59138.01438    30653.12012\nneighborhood_feWashington Square West         88690.10153    29937.37012\nneighborhood_feWest Central Germantown        16807.75200    27884.51013\nneighborhood_feWest Kensington               -68127.87269    20317.08101\nneighborhood_feWest Mount Airy                38179.51090    18510.39444\nneighborhood_feWest Oak Lane                 -45315.59922    18269.26015\nneighborhood_feWest Passyunk                 -79646.98859    19772.56079\nneighborhood_feWest Poplar                  -110299.67792    43554.69769\nneighborhood_feWest Powelton                -104040.85024    34399.77899\nneighborhood_feWhitman                       -42920.67535    18272.47676\nneighborhood_feWinchester Park                38808.93027    34718.30402\nneighborhood_feWissahickon                    -5389.48604    20201.84628\nneighborhood_feWissahickon Hills              12442.07991    32378.82072\nneighborhood_feWissinoming                   -23043.18919    18367.46550\nneighborhood_feWister                        -68117.95065    31454.19955\nneighborhood_feWynnefield                    -99224.93028    20126.46981\nneighborhood_feSmall Neighborhoods           -26240.56901    19047.76223\nquarters_fe2                                   3325.18036     3378.65124\nquarters_fe3                                   4564.25634     3438.64092\nquarters_fe4                                   5216.49275     3566.47726\ncity_dist_mi:knn_amenity_mi                    1654.98301     2642.51941\ncity_dist_mi:septa_half_mi                     -332.55888       41.45544\n                                           t value             Pr(>|t|)    \n(Intercept)                                -36.443 < 0.0000000000000002 ***\nln_square_feet                              46.192 < 0.0000000000000002 ***\nbath_num                                    18.991 < 0.0000000000000002 ***\nac_binary                                   12.623 < 0.0000000000000002 ***\nfireplace_num                               22.918 < 0.0000000000000002 ***\nstory_num                                   -1.333             0.182558    \ngarage_num                                  22.579 < 0.0000000000000002 ***\nbasement_typeFull Finished                  11.493 < 0.0000000000000002 ***\nbasement_typeFull Semi-Finished              9.242 < 0.0000000000000002 ***\nbasement_typeFull Unfinished                 8.938 < 0.0000000000000002 ***\nbasement_typeFull Unknown Finish             7.682  0.00000000000001677 ***\nbasement_typePartial Finished                5.329  0.00000010024344867 ***\nbasement_typePartial Semi-Finished           4.645  0.00000343597723092 ***\nbasement_typePartial Unfinished              3.372             0.000749 ***\nbasement_typePartial Unknown Finish          2.912             0.003596 ** \nbasement_typeUnknown Size Finished           4.241  0.00002235191311615 ***\nbasement_typeUnknown Size Unfinished         4.283  0.00001854901682209 ***\nfuel_typeElectric                           -1.198             0.230938    \nfuel_typeOil Heat                            0.231             0.816947    \nfuel_typeOther                               0.171             0.864134    \nage                                        -11.385 < 0.0000000000000002 ***\nI(age^2)                                     7.884  0.00000000000000341 ***\nmedhhinc                                     7.452  0.00000000000009754 ***\npct_vacant                                  -3.446             0.000570 ***\npct_single_family                            1.021             0.307435    \ncity_dist_mi                                -1.497             0.134435    \nsepta_half_mi                                7.341  0.00000000000022310 ***\nln_park_dist                                -1.289             0.197573    \nknn_amenity_mi                              -0.867             0.385785    \nneighborhood_feAcademy Gardens               1.279             0.200775    \nneighborhood_feAllegheny West               -4.111  0.00003966371497638 ***\nneighborhood_feAndorra                      -1.204             0.228491    \nneighborhood_feAston-Woodbridge              1.129             0.258973    \nneighborhood_feBella Vista                   3.670             0.000244 ***\nneighborhood_feBelmont                      -1.779             0.075282 .  \nneighborhood_feBrewerytown                  -3.760             0.000170 ***\nneighborhood_feBridesburg                    0.370             0.711503    \nneighborhood_feBurholme                     -0.305             0.760428    \nneighborhood_feBustleton                     1.088             0.276456    \nneighborhood_feCarroll Park                 -3.871             0.000109 ***\nneighborhood_feCedar Park                    2.357             0.018424 *  \nneighborhood_feCedarbrook                   -0.796             0.425926    \nneighborhood_feChestnut Hill                19.325 < 0.0000000000000002 ***\nneighborhood_feClearview                    -2.653             0.007980 ** \nneighborhood_feCobbs Creek                  -4.776  0.00000180380477018 ***\nneighborhood_feDickinson Narrows            -2.236             0.025354 *  \nneighborhood_feDunlap                       -4.278  0.00001901511843807 ***\nneighborhood_feEast Germantown              -2.501             0.012409 *  \nneighborhood_feEast Kensington              -1.337             0.181300    \nneighborhood_feEast Mount Airy              -2.165             0.030422 *  \nneighborhood_feEast Oak Lane                -3.793             0.000149 ***\nneighborhood_feEast Parkside                -2.252             0.024310 *  \nneighborhood_feEast Passyunk                 0.938             0.348175    \nneighborhood_feEastwick                     -1.894             0.058281 .  \nneighborhood_feElmwood                      -3.607             0.000311 ***\nneighborhood_feFairhill                     -1.916             0.055343 .  \nneighborhood_feFairmount                     4.407  0.00001056260193703 ***\nneighborhood_feFeltonville                  -3.235             0.001218 ** \nneighborhood_feFern Rock                    -2.351             0.018732 *  \nneighborhood_feFishtown - Lower Kensington   0.630             0.528647    \nneighborhood_feFitler Square                14.149 < 0.0000000000000002 ***\nneighborhood_feFox Chase                    -0.056             0.955684    \nneighborhood_feFrancisville                 -2.354             0.018584 *  \nneighborhood_feFrankford                    -3.529             0.000419 ***\nneighborhood_feFranklinville                -4.605  0.00000416765856661 ***\nneighborhood_feGermantown - Morton          -2.776             0.005517 ** \nneighborhood_feGermantown - Penn Knox       -3.078             0.002088 ** \nneighborhood_feGermantown - Westside        -2.506             0.012230 *  \nneighborhood_feGermany Hill                  0.392             0.695236    \nneighborhood_feGirard Estates               -1.616             0.106147    \nneighborhood_feGlenwood                     -4.184  0.00002885494372713 ***\nneighborhood_feGraduate Hospital             4.883  0.00000105860760820 ***\nneighborhood_feGrays Ferry                  -4.327  0.00001522694286549 ***\nneighborhood_feGreenwich                    -2.544             0.010983 *  \nneighborhood_feHaddington                   -4.961  0.00000071026962559 ***\nneighborhood_feHarrowgate                   -3.273             0.001065 ** \nneighborhood_feHartranft                    -5.812  0.00000000630356266 ***\nneighborhood_feHawthorne                     0.457             0.647958    \nneighborhood_feHolmesburg                   -0.860             0.389915    \nneighborhood_feHunting Park                 -2.409             0.016007 *  \nneighborhood_feJuniata Park                 -2.757             0.005833 ** \nneighborhood_feKingsessing                  -5.824  0.00000000588257898 ***\nneighborhood_feLawndale                     -2.202             0.027674 *  \nneighborhood_feLexington Park                0.815             0.415160    \nneighborhood_feLogan                        -5.163  0.00000024686521012 ***\nneighborhood_feLogan Square                 12.562 < 0.0000000000000002 ***\nneighborhood_feLower Moyamensing            -3.737             0.000187 ***\nneighborhood_feManayunk                      1.558             0.119242    \nneighborhood_feMantua                       -3.389             0.000704 ***\nneighborhood_feMayfair                      -0.617             0.537574    \nneighborhood_feMelrose Park Gardens         -2.133             0.032982 *  \nneighborhood_feMill Creek                   -4.158  0.00003233743685558 ***\nneighborhood_feMillbrook                     0.508             0.611126    \nneighborhood_feModena                        1.957             0.050340 .  \nneighborhood_feMorrell Park                  0.904             0.365999    \nneighborhood_feNewbold                      -2.505             0.012245 *  \nneighborhood_feNicetown                     -1.843             0.065371 .  \nneighborhood_feNormandy Village              3.159             0.001585 ** \nneighborhood_feNorth Central                -4.593  0.00000439924270724 ***\nneighborhood_feNorthern Liberties            0.140             0.888798    \nneighborhood_feNorthwood                    -4.144  0.00003428980342821 ***\nneighborhood_feOgontz                       -1.929             0.053777 .  \nneighborhood_feOld City                      9.807 < 0.0000000000000002 ***\nneighborhood_feOld Kensington               -2.282             0.022482 *  \nneighborhood_feOlney                        -3.987  0.00006727698685702 ***\nneighborhood_feOverbrook                    -5.479  0.00000004347320880 ***\nneighborhood_feOxford Circle                -1.274             0.202722    \nneighborhood_fePacker Park                   0.377             0.706066    \nneighborhood_feParkwood Manor                1.756             0.079091 .  \nneighborhood_fePaschall                     -3.922  0.00008813490635267 ***\nneighborhood_fePassyunk Square               0.206             0.836867    \nneighborhood_fePennsport                    -1.639             0.101276    \nneighborhood_fePennypack                    -0.010             0.992352    \nneighborhood_fePennypack Woods               0.227             0.820496    \nneighborhood_fePenrose                      -1.902             0.057199 .  \nneighborhood_fePoint Breeze                 -3.560             0.000372 ***\nneighborhood_feQueen Village                 5.167  0.00000024082503649 ***\nneighborhood_feRhawnhurst                    0.607             0.543629    \nneighborhood_feRichmond                     -1.834             0.066696 .  \nneighborhood_feRittenhouse                  16.236 < 0.0000000000000002 ***\nneighborhood_feRoxborough                    0.636             0.524708    \nneighborhood_feRoxborough Park              -1.035             0.300588    \nneighborhood_feSharswood                    -2.345             0.019063 *  \nneighborhood_feSociety Hill                 13.429 < 0.0000000000000002 ***\nneighborhood_feSomerton                      1.992             0.046406 *  \nneighborhood_feSouthwest Germantown         -4.260  0.00002062292616807 ***\nneighborhood_feSouthwest Schuylkill         -4.310  0.00001647368688246 ***\nneighborhood_feSpring Garden                 6.918  0.00000000000479383 ***\nneighborhood_feSpruce Hill                   4.479  0.00000755137153481 ***\nneighborhood_feStadium District             -1.060             0.289374    \nneighborhood_feStanton                      -7.136  0.00000000000100613 ***\nneighborhood_feStrawberry Mansion           -5.276  0.00000013413070739 ***\nneighborhood_feSummerdale                   -1.847             0.064783 .  \nneighborhood_feTacony                       -1.919             0.055058 .  \nneighborhood_feTioga                        -5.118  0.00000031349740898 ***\nneighborhood_feTorresdale                   -0.883             0.377460    \nneighborhood_feUpper Kensington             -5.219  0.00000018293556101 ***\nneighborhood_feUpper Roxborough             -1.892             0.058533 .  \nneighborhood_feWalnut Hill                  -1.929             0.053718 .  \nneighborhood_feWashington Square West        2.963             0.003057 ** \nneighborhood_feWest Central Germantown       0.603             0.546676    \nneighborhood_feWest Kensington              -3.353             0.000801 ***\nneighborhood_feWest Mount Airy               2.063             0.039170 *  \nneighborhood_feWest Oak Lane                -2.480             0.013134 *  \nneighborhood_feWest Passyunk                -4.028  0.00005651845672808 ***\nneighborhood_feWest Poplar                  -2.532             0.011338 *  \nneighborhood_feWest Powelton                -3.024             0.002495 ** \nneighborhood_feWhitman                      -2.349             0.018842 *  \nneighborhood_feWinchester Park               1.118             0.263662    \nneighborhood_feWissahickon                  -0.267             0.789641    \nneighborhood_feWissahickon Hills             0.384             0.700787    \nneighborhood_feWissinoming                  -1.255             0.209658    \nneighborhood_feWister                       -2.166             0.030357 *  \nneighborhood_feWynnefield                   -4.930  0.00000083160419737 ***\nneighborhood_feSmall Neighborhoods          -1.378             0.168343    \nquarters_fe2                                 0.984             0.325047    \nquarters_fe3                                 1.327             0.184417    \nquarters_fe4                                 1.463             0.143587    \ncity_dist_mi:knn_amenity_mi                  0.626             0.531135    \ncity_dist_mi:septa_half_mi                  -8.022  0.00000000000000112 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 138300 on 13723 degrees of freedom\nMultiple R-squared:  0.7501,\tAdjusted R-squared:  0.7472 \nF-statistic:   259 on 159 and 13723 DF,  p-value: < 0.00000000000000022\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Step model to check for most influential predictors.\nstep_model <- step(final_model, direction = \"both\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nStart:  AIC=328831.2\nsale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + \n    story_num + garage_num + basement_type + fuel_type + age + \n    I(age^2) + medhhinc + pct_vacant + pct_single_family + city_dist_mi + \n    septa_half_mi + ln_park_dist + knn_amenity_mi + knn_amenity_mi * \n    city_dist_mi + septa_half_mi * city_dist_mi + neighborhood_fe + \n    quarters_fe\n\n                               Df      Sum of Sq             RSS    AIC\n- fuel_type                     3    29291306230 262526956909507 328827\n- quarters_fe                   3    48687286101 262546352889378 328828\n- city_dist_mi:knn_amenity_mi   1     7502864212 262505168467489 328830\n- pct_single_family             1    19926739927 262517592343204 328830\n- ln_park_dist                  1    31760364605 262529425967882 328831\n- story_num                     1    33988307880 262531653911157 328831\n<none>                                           262497665603277 328831\n- pct_vacant                    1   227177637523 262724843240800 328841\n- medhhinc                      1  1062196974143 263559862577420 328885\n- I(age^2)                      1  1188920399920 263686586003197 328892\n- city_dist_mi:septa_half_mi    1  1230978421267 263728644024543 328894\n- age                           1  2479426316334 264977091919610 328960\n- ac_binary                     1  3047985297556 265545650900832 328990\n- basement_type                10  5090476653267 267588142256544 329078\n- bath_num                      1  6898841085908 269396506689184 329189\n- garage_num                    1  9751992536383 272249658139660 329336\n- fireplace_num                 1 10046915002573 272544580605849 329351\n- ln_square_feet                1 40814913228775 303312578832052 330836\n- neighborhood_fe             126 54479351260674 316977016863950 331197\n\nStep:  AIC=328826.8\nsale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + \n    story_num + garage_num + basement_type + age + I(age^2) + \n    medhhinc + pct_vacant + pct_single_family + city_dist_mi + \n    septa_half_mi + ln_park_dist + knn_amenity_mi + neighborhood_fe + \n    quarters_fe + city_dist_mi:knn_amenity_mi + city_dist_mi:septa_half_mi\n\n                               Df      Sum of Sq             RSS    AIC\n- quarters_fe                   3    47663097715 262574620007222 328823\n- city_dist_mi:knn_amenity_mi   1     7728079582 262534684989088 328825\n- pct_single_family             1    19707606054 262546664515561 328826\n- ln_park_dist                  1    32231192502 262559188102009 328827\n- story_num                     1    33640799011 262560597708518 328827\n<none>                                           262526956909507 328827\n+ fuel_type                     3    29291306230 262497665603277 328831\n- pct_vacant                    1   231494066009 262758450975516 328837\n- medhhinc                      1  1068136777060 263595093686567 328881\n- I(age^2)                      1  1187398099796 263714355009303 328887\n- city_dist_mi:septa_half_mi    1  1235288890463 263762245799970 328890\n- age                           1  2473620812909 265000577722415 328955\n- ac_binary                     1  3111535277414 265638492186920 328988\n- basement_type                10  5116255704022 267643212613529 329075\n- bath_num                      1  6880305741509 269407262651016 329184\n- garage_num                    1  9775449552879 272302406462386 329332\n- fireplace_num                 1 10086445343028 272613402252535 329348\n- ln_square_feet                1 41033877166244 303560834075751 330841\n- neighborhood_fe             126 54518512496951 317045469406458 331194\n\nStep:  AIC=328823.3\nsale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + \n    story_num + garage_num + basement_type + age + I(age^2) + \n    medhhinc + pct_vacant + pct_single_family + city_dist_mi + \n    septa_half_mi + ln_park_dist + knn_amenity_mi + neighborhood_fe + \n    city_dist_mi:knn_amenity_mi + city_dist_mi:septa_half_mi\n\n                               Df      Sum of Sq             RSS    AIC\n- city_dist_mi:knn_amenity_mi   1     7640688841 262582260696063 328822\n- pct_single_family             1    20067833883 262594687841105 328822\n- ln_park_dist                  1    32005690287 262606625697509 328823\n- story_num                     1    33899752615 262608519759837 328823\n<none>                                           262574620007222 328823\n+ quarters_fe                   3    47663097715 262526956909507 328827\n+ fuel_type                     3    28267117844 262546352889378 328828\n- pct_vacant                    1   232781450230 262807401457452 328834\n- medhhinc                      1  1070794141050 263645414148272 328878\n- I(age^2)                      1  1188059138702 263762679145925 328884\n- city_dist_mi:septa_half_mi    1  1240320543243 263814940550465 328887\n- age                           1  2476861470042 265051481477264 328952\n- ac_binary                     1  3114048174200 265688668181422 328985\n- basement_type                10  5101378305872 267675998313094 329070\n- bath_num                      1  6879515547403 269454135554625 329180\n- garage_num                    1  9761217229099 272335837236321 329328\n- fireplace_num                 1 10086091959024 272660711966247 329345\n- ln_square_feet                1 41027723058193 303602343065415 330837\n- neighborhood_fe             126 54533360011622 317107980018844 331191\n\nStep:  AIC=328821.7\nsale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + \n    story_num + garage_num + basement_type + age + I(age^2) + \n    medhhinc + pct_vacant + pct_single_family + city_dist_mi + \n    septa_half_mi + ln_park_dist + knn_amenity_mi + neighborhood_fe + \n    city_dist_mi:septa_half_mi\n\n                               Df      Sum of Sq             RSS    AIC\n- knn_amenity_mi                1    10258397228 262592519093292 328820\n- pct_single_family             1    19589044073 262601849740136 328821\n- ln_park_dist                  1    31831658301 262614092354365 328821\n- story_num                     1    32448748353 262614709444417 328821\n<none>                                           262582260696063 328822\n+ city_dist_mi:knn_amenity_mi   1     7640688841 262574620007222 328823\n+ quarters_fe                   3    47575706975 262534684989088 328825\n+ fuel_type                     3    28489340452 262553771355611 328826\n- pct_vacant                    1   228890973776 262811151669839 328832\n- medhhinc                      1  1123486534387 263705747230451 328879\n- I(age^2)                      1  1189659359701 263771920055764 328882\n- city_dist_mi:septa_half_mi    1  1431158316586 264013419012649 328895\n- age                           1  2484992093025 265067252789089 328950\n- ac_binary                     1  3117445785849 265699706481912 328984\n- basement_type                10  5100919334738 267683180030802 329069\n- bath_num                      1  6872409243178 269454669939241 329178\n- garage_num                    1  9754485171729 272336745867792 329326\n- fireplace_num                 1 10078758344826 272661019040890 329343\n- ln_square_feet                1 41039873091006 303622133787069 330836\n- neighborhood_fe             126 54611581815584 317193842511648 331193\n\nStep:  AIC=328820.3\nsale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + \n    story_num + garage_num + basement_type + age + I(age^2) + \n    medhhinc + pct_vacant + pct_single_family + city_dist_mi + \n    septa_half_mi + ln_park_dist + neighborhood_fe + city_dist_mi:septa_half_mi\n\n                              Df      Sum of Sq             RSS    AIC\n- pct_single_family            1    17516329942 262610035423233 328819\n- story_num                    1    31989214042 262624508307333 328820\n- ln_park_dist                 1    33881262942 262626400356233 328820\n<none>                                          262592519093292 328820\n+ knn_amenity_mi               1    10258397228 262582260696063 328822\n+ quarters_fe                  3    47914194039 262544604899253 328824\n+ fuel_type                    3    28552031911 262563967061380 328825\n- pct_vacant                   1   228071955219 262820591048511 328830\n- medhhinc                     1  1154301728799 263746820822091 328879\n- I(age^2)                     1  1187867988165 263780387081456 328881\n- city_dist_mi:septa_half_mi   1  1428441824517 264020960917808 328894\n- age                          1  2483425354156 265075944447448 328949\n- ac_binary                    1  3115319852620 265707838945911 328982\n- basement_type               10  5093400845586 267685919938877 329067\n- bath_num                     1  6873267530482 269465786623774 329177\n- garage_num                   1  9744591721973 272337110815265 329324\n- fireplace_num                1 10068500036056 272661019129348 329341\n- ln_square_feet               1 41051759221484 303644278314775 330835\n- neighborhood_fe            126 54934695719999 317527214813291 331205\n\nStep:  AIC=328819.2\nsale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + \n    story_num + garage_num + basement_type + age + I(age^2) + \n    medhhinc + pct_vacant + city_dist_mi + septa_half_mi + ln_park_dist + \n    neighborhood_fe + city_dist_mi:septa_half_mi\n\n                              Df      Sum of Sq             RSS    AIC\n- story_num                    1    33952275751 262643987698984 328819\n- ln_park_dist                 1    35780677027 262645816100260 328819\n<none>                                          262610035423233 328819\n+ pct_single_family            1    17516329942 262592519093292 328820\n+ knn_amenity_mi               1     8185683097 262601849740136 328821\n+ quarters_fe                  3    48218416368 262561817006865 328823\n+ fuel_type                    3    28307547225 262581727876008 328824\n- pct_vacant                   1   225660530490 262835695953723 328829\n- I(age^2)                     1  1189715385678 263799750808911 328880\n- medhhinc                     1  1212143043197 263822178466430 328881\n- city_dist_mi:septa_half_mi   1  1465288887215 264075324310448 328894\n- age                          1  2483423804818 265093459228052 328948\n- ac_binary                    1  3125197709254 265735233132488 328981\n- basement_type               10  5157061941754 267767097364987 329069\n- bath_num                     1  6886217998671 269496253421905 329177\n- garage_num                   1  9861971915501 272472007338734 329329\n- fireplace_num                1 10154625988422 272764661411656 329344\n- ln_square_feet               1 41239244968237 303849280391471 330842\n- neighborhood_fe            126 54917360702735 317527396125968 331203\n\nStep:  AIC=328819\nsale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + \n    garage_num + basement_type + age + I(age^2) + medhhinc + \n    pct_vacant + city_dist_mi + septa_half_mi + ln_park_dist + \n    neighborhood_fe + city_dist_mi:septa_half_mi\n\n                              Df      Sum of Sq             RSS    AIC\n- ln_park_dist                 1    37088779964 262681076478948 328819\n<none>                                          262643987698984 328819\n+ story_num                    1    33952275751 262610035423233 328819\n+ pct_single_family            1    19479391651 262624508307333 328820\n+ knn_amenity_mi               1     7661975952 262636325723033 328821\n+ quarters_fe                  3    48485012070 262595502686914 328822\n+ fuel_type                    3    27891291636 262616096407348 328824\n- pct_vacant                   1   223078062952 262867065761936 328829\n- I(age^2)                     1  1171351745449 263815339444434 328879\n- medhhinc                     1  1206630741698 263850618440683 328881\n- city_dist_mi:septa_half_mi   1  1487117530887 264131105229872 328895\n- age                          1  2478986749323 265122974448307 328947\n- ac_binary                    1  3116812315900 265760800014885 328981\n- basement_type               10  5124404684650 267768392383634 329067\n- bath_num                     1  6865474227828 269509461926812 329175\n- garage_num                   1 10077721127271 272721708826256 329340\n- fireplace_num                1 10194706863620 272838694562604 329346\n- ln_square_feet               1 46784996837845 309428984536830 331093\n- neighborhood_fe            126 54884887831956 317528875530940 331202\n\nStep:  AIC=328819\nsale_price ~ ln_square_feet + bath_num + ac_binary + fireplace_num + \n    garage_num + basement_type + age + I(age^2) + medhhinc + \n    pct_vacant + city_dist_mi + septa_half_mi + neighborhood_fe + \n    city_dist_mi:septa_half_mi\n\n                              Df      Sum of Sq             RSS    AIC\n<none>                                          262681076478948 328819\n+ ln_park_dist                 1    37088779964 262643987698984 328819\n+ story_num                    1    35260378688 262645816100260 328819\n+ pct_single_family            1    21554786315 262659521692633 328820\n+ knn_amenity_mi               1     9414440263 262671662038685 328820\n+ quarters_fe                  3    48291130287 262632785348661 328822\n+ fuel_type                    3    28384069019 262652692409930 328823\n- pct_vacant                   1   233928798083 262915005277031 328829\n- I(age^2)                     1  1166982321537 263848058800485 328878\n- medhhinc                     1  1199519985435 263880596464384 328880\n- city_dist_mi:septa_half_mi   1  1547382207846 264228458686795 328898\n- age                          1  2471158435449 265152234914397 328947\n- ac_binary                    1  3093083166434 265774159645382 328979\n- basement_type               10  5119477792449 267800554271397 329067\n- bath_num                     1  6862714567634 269543791046582 329175\n- garage_num                   1 10067293974161 272748370453110 329339\n- fireplace_num                1 10167733347582 272848809826531 329344\n- ln_square_feet               1 46823860752575 309504937231523 331094\n- neighborhood_fe            126 56125236061007 318806312539955 331255\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compute TSS\ny <- model.response(model.frame(step_model))\ntss <- sum((y - mean(y))^2)\n\n# Sequential (Type I) Sum Sq → ΔR²\nanova_model <- anova(step_model)\nanova_model <- anova_model[!is.na(anova_model$\"Sum Sq\"), , drop = FALSE]\nseq_imp <- transform(anova_model,\n                     term = rownames(anova_model),\n                     delta_R2 = `Sum Sq` / tss)\n\n# Get top 5 predictors\nseq_top4 <- seq_imp[order(-seq_imp$delta_R2), c(\"term\", \"Df\", \"delta_R2\")]\nhead(seq_top4, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n                           term    Df   delta_R2\nln_square_feet   ln_square_feet     1 0.40682553\nResiduals             Residuals 13734 0.25010793\nneighborhood_fe neighborhood_fe   126 0.06662910\nmedhhinc               medhhinc     1 0.06411606\nbath_num               bath_num     1 0.05055231\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Residual map preparation\n\n# Match CRS\nphilly_neighborhoods <- st_transform(philly_neighborhoods, st_crs(final_data))\n\n# Spatial join: assign each point to a neighborhood\npoints_with_neighborhood <- st_join(final_data, philly_neighborhoods)\n\n# Add residual column\npoints_with_neighborhood$residuals <- residuals(final_model)\n\n# Calculate average residual by neighborhood\nneighborhood_residuals <- points_with_neighborhood %>%\n  st_drop_geometry() %>%\n  group_by(MAPNAME) %>%\n  summarise(\n    mean_residual = mean(residuals, na.rm = TRUE),\n    median_residual = median(residuals, na.rm = TRUE),\n    n_sales = n()\n  )\n\n# Join to neighborhoods\nneighborhoods_with_residuals <- philly_neighborhoods %>%\n  left_join(neighborhood_residuals, by = \"MAPNAME\")\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Map the averaged residuals\n\nneighborhood_map <- ggplot(neighborhoods_with_residuals) +\n  geom_sf(aes(fill = mean_residual), color = \"black\", size = 0.3) +\n  scale_fill_gradient2(\n    low = \"blue2\", \n    mid = \"#f5f4f0\", \n    high = \"red2\",\n    midpoint = 0,\n    labels = scales::dollar,\n    name = \"Mean Residual ($)\"\n  ) +\n  theme_minimal() +\n  labs(\n    title = \"Average Model Residuals by Neighborhood\",\n    subtitle = \"Red = Under-Predicted | Blue = Over-Predicted\"\n  ) +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 16),\n    axis.text = element_blank(),\n    axis.ticks = element_blank(),\n    panel.grid = element_blank()\n  )\n\nneighborhood_map\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-62-1.png){width=672}\n:::\n\n```{.r .cell-code}\n#ggsave(\"slide_images/residual-neighborhood.png\", plot = neighborhood_map, width = 8, height = 6, units = \"in\", dpi = 300)\n```\n:::\n\n\nUniversity City is the hardest to predict, Penn owns a lot of property that doesn’t get taxed. And some less wealthy and disinvested neighborhoods are overvalued, like Parkside and Wynnefield in West Philadelphia, but the overall model predicts pretty accurately for most neighborhoods in Philadelphia.\n\n# Cross-Validation\n\n## 10-Fold Cross-Validation\n\n### Logged Price Response Variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# first model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_log_1 <- train(ln_sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2), # Age polynomial.\n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_log_1$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept      RMSE  Rsquared       MAE      RMSESD  RsquaredSD       MAESD\n1      TRUE 0.4155534 0.5775606 0.3037167 0.005840741 0.007099066 0.004524254\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# second model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_log_2 <- train(ln_sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family, # census\n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_log_2$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept      RMSE  Rsquared       MAE     RMSESD RsquaredSD       MAESD\n1      TRUE 0.3439329 0.7108162 0.2432055 0.01002661 0.01197928 0.004981254\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# third model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_log_3 <- train(ln_sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family +\n                    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi, # Spatial\n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_log_3$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept      RMSE  Rsquared       MAE     RMSESD RsquaredSD       MAESD\n1      TRUE 0.3298712 0.7339455 0.2311302 0.01037016 0.01242474 0.004006271\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# third model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_log_4 <- train(ln_sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family +\n                    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi + # Spatial\n                    knn_amenity_mi * city_dist_mi + septa_half_mi * city_dist_mi + # Interaction between amenities and downtown distance.\n                    neighborhood_fe, # Fixed effect  \n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_log_4$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept      RMSE  Rsquared      MAE     RMSESD RsquaredSD       MAESD\n1      TRUE 0.2890608 0.7955765 0.193469 0.01314438 0.01571413 0.004562659\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compare all 4 models\n\n## Combine four models：cv_model_1, cv_model_2, cv_model_3, cv_model_4\nlog_compare <- bind_rows(\n  cv_log_1$results %>% \n    mutate(Model = \"Model 1: Structural\"),\n  cv_log_2$results %>% \n    mutate(Model = \"Model 2: Structural + Census\"),\n  cv_log_3$results %>% \n    mutate(Model = \"Model 3: Structural + Census + Spatial\"),\n  cv_log_4$results %>% \n    mutate(Model = \"Model 4: Final Model\")\n) %>%\n  select(Model, RMSE, Rsquared, MAE) %>% \n  mutate(across(c(RMSE, Rsquared, MAE), round, 3))\n\n## Plot\nlog_kable <- kable(log_compare,\n                     col.names = c(\"Model\", \"RMSE\", \"R²\", \"MAE\"),\n                     caption = \"Log Model Performance Comparison (10-Fold Cross-Validation)\",\n                     digits = 4,\n                     format.args = list(big.mark = \",\")\n) %>%\n  kable_styling(latex_options = \"striped\", full_width = FALSE) %>%\n  column_spec(1, bold = TRUE, width = \"10cm\") %>%\n  row_spec(0, color = \"#f5f4f0\", background = \"#ff4100\")\n\nlog_kable\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Log Model Performance Comparison (10-Fold Cross-Validation)</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Model </th>\n   <th style=\"text-align:right;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> RMSE </th>\n   <th style=\"text-align:right;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> R² </th>\n   <th style=\"text-align:right;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> MAE </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 1: Structural </td>\n   <td style=\"text-align:right;\"> 0.416 </td>\n   <td style=\"text-align:right;\"> 0.578 </td>\n   <td style=\"text-align:right;\"> 0.304 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 2: Structural + Census </td>\n   <td style=\"text-align:right;\"> 0.344 </td>\n   <td style=\"text-align:right;\"> 0.711 </td>\n   <td style=\"text-align:right;\"> 0.243 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 3: Structural + Census + Spatial </td>\n   <td style=\"text-align:right;\"> 0.330 </td>\n   <td style=\"text-align:right;\"> 0.734 </td>\n   <td style=\"text-align:right;\"> 0.231 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 4: Final Model </td>\n   <td style=\"text-align:right;\"> 0.289 </td>\n   <td style=\"text-align:right;\"> 0.796 </td>\n   <td style=\"text-align:right;\"> 0.193 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n### Unlogged Price Response Variable\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# first model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_model_1 <- train(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2), # Age polynomial.\n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_model_1$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept     RMSE  Rsquared      MAE   RMSESD RsquaredSD    MAESD\n1      TRUE 176344.9 0.5890063 102820.4 17348.48 0.04466116 3386.644\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# second model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_model_2 <- train(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family, # census\n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_model_2$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept     RMSE  Rsquared      MAE  RMSESD RsquaredSD    MAESD\n1      TRUE 161630.5 0.6544361 88848.47 20418.2 0.05751453 3576.953\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# third model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_model_3 <- train(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family +\n                    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi, # Spatial\n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_model_3$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept     RMSE  Rsquared      MAE   RMSESD RsquaredSD    MAESD\n1      TRUE 154443.5 0.6843236 84936.68 20818.25 0.05820868 3103.814\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(caret)\n# 10-fold cross-validation\n# third model\nset.seed(0)\n\ntrain_control <- trainControl(method = \"cv\", number = 10, savePredictions=\"final\")\n\ncv_model_4 <- train(sale_price ~ ln_square_feet + bath_num + # Structural.\n                    ac_binary + fireplace_num + story_num + garage_num + # Structural.\n                    basement_type + fuel_type + # Categorical structural.\n                    age + I(age^2) + # Age polynomial.\n                    medhhinc + pct_vacant + pct_single_family +\n                    city_dist_mi + septa_half_mi + ln_park_dist + knn_amenity_mi + # Spatial\n                    knn_amenity_mi * city_dist_mi + septa_half_mi * city_dist_mi + # Interaction between amenities and downtown distance.\n                    neighborhood_fe, # Fixed effect  \n                    data = final_data,\n                    method = \"lm\",\n                    trControl = train_control)\n\ncv_model_4$results\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  intercept     RMSE  Rsquared      MAE   RMSESD RsquaredSD    MAESD\n1      TRUE 138279.4 0.7459614 72567.76 22998.06 0.06401242 2898.615\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Compare all 4 models\n\n## Combine four models：cv_model_1, cv_model_2, cv_model_3, cv_model_4\nmodel_compare <- bind_rows(\n  cv_model_1$results %>% \n    mutate(Model = \"Model 1: Structural\"),\n  cv_model_2$results %>% \n    mutate(Model = \"Model 2: Structural + Census\"),\n  cv_model_3$results %>% \n    mutate(Model = \"Model 3: Structural + Census + Spatial\"),\n  cv_model_4$results %>% \n    mutate(Model = \"Model 4: Final Model\")\n) %>%\n  select(Model, RMSE, Rsquared, MAE) %>% \n  mutate(across(c(RMSE, Rsquared, MAE), round, 3))\n\n## Plot\nmodel_kable <- kable(model_compare,\n                     col.names = c(\"Model\", \"RMSE ($)\", \"R²\", \"MAE ($)\"),\n                     caption = \"Model Performance Comparison (10-Fold Cross-Validation)\",\n                     digits = 4,\n                     format.args = list(big.mark = \",\")\n) %>%\n  kable_styling(latex_options = \"striped\", full_width = FALSE) %>%\n  column_spec(1, bold = TRUE, width = \"10cm\") %>%\n  row_spec(0, color = \"#f5f4f0\", background = \"#ff4100\")\n\nmodel_kable\n```\n\n::: {.cell-output-display}\n`````{=html}\n<table class=\"table\" style=\"width: auto !important; margin-left: auto; margin-right: auto;\">\n<caption>Model Performance Comparison (10-Fold Cross-Validation)</caption>\n <thead>\n  <tr>\n   <th style=\"text-align:left;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> Model </th>\n   <th style=\"text-align:right;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> RMSE ($) </th>\n   <th style=\"text-align:right;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> R² </th>\n   <th style=\"text-align:right;color: rgba(245, 244, 240, 255) !important;background-color: rgba(255, 65, 0, 255) !important;\"> MAE ($) </th>\n  </tr>\n </thead>\n<tbody>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 1: Structural </td>\n   <td style=\"text-align:right;\"> 176,344.9 </td>\n   <td style=\"text-align:right;\"> 0.589 </td>\n   <td style=\"text-align:right;\"> 102,820.38 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 2: Structural + Census </td>\n   <td style=\"text-align:right;\"> 161,630.5 </td>\n   <td style=\"text-align:right;\"> 0.654 </td>\n   <td style=\"text-align:right;\"> 88,848.47 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 3: Structural + Census + Spatial </td>\n   <td style=\"text-align:right;\"> 154,443.5 </td>\n   <td style=\"text-align:right;\"> 0.684 </td>\n   <td style=\"text-align:right;\"> 84,936.68 </td>\n  </tr>\n  <tr>\n   <td style=\"text-align:left;width: 10cm; font-weight: bold;\"> Model 4: Final Model </td>\n   <td style=\"text-align:right;\"> 138,279.4 </td>\n   <td style=\"text-align:right;\"> 0.746 </td>\n   <td style=\"text-align:right;\"> 72,567.76 </td>\n  </tr>\n</tbody>\n</table>\n\n`````\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create predicted vs. actual plot\n\npred_df <- cv_model_4$pred\n\n# Plot Predicted vs Actual \npred_v_act <- ggplot(pred_df, aes(x = obs, y = pred)) +\n  geom_point(alpha = 0.5, color = \"#2C7BB6\") +\n  geom_abline(intercept = 0, slope = 1, color = \"red\", linetype = \"dashed\") +\n  labs(\n    title = \"Predicted vs. Actual Sale Price\",\n    x = \"Actual Sale Price ($)\",\n    y = \"Predicted Sale Price ($)\"\n  ) +\n  scale_x_continuous(labels = scales::dollar) +\n  scale_y_continuous(labels = scales::dollar) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 10)),\n    panel.grid.minor = element_blank(),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n  )\n\npred_v_act\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-73-1.png){width=672}\n:::\n:::\n\n\n# Model Diagnostics\n\n## Check Assumptions\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresid_df <- data.frame(\n  fitted = fitted(final_model),\n  residuals = resid(final_model)\n)\n\nresid_v_fit <- ggplot(resid_df, aes(x = fitted, y = residuals)) +\n  geom_point(alpha = 0.5, color = \"#2C7BB6\") +\n  geom_hline(yintercept = 0, color = \"red\", linetype = \"dashed\") +\n  labs(\n    title = \"Residuals vs. Fitted Values\",\n    x = \"Fitted Values (Predicted Sale Price)\",\n    y = \"Residuals\"\n  ) +\n  scale_x_continuous(labels = scales::dollar) +\n  scale_y_continuous(labels = scales::dollar) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 10)),\n    panel.grid.minor = element_blank(),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n  )\n\nresid_v_fit\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-74-1.png){width=672}\n:::\n:::\n\n\n**Residuals vs Fitted Values:**\n\nThe residual plot shows that most residuals are centered around zero, but the spread of residuals increases as the fitted values grow. This “funnel-shaped” pattern suggests potential heteroskedasticity, meaning the variance of errors may increase for higher-priced properties. While the overall linearity assumption appears reasonable, the increasing dispersion indicates that the model’s prediction error is not constant across the price range.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nresid_df <- data.frame(residuals = residuals(final_model))\n\n# Q-Q Plot\nqq_plot <- ggplot(resid_df, aes(sample = residuals)) +\n  stat_qq(color = \"#2C7BB6\", alpha = 0.6, size = 2) +      \n  stat_qq_line(color = \"red\", linetype = \"dashed\") +        \n  labs(\n    title = \"Normal Q-Q Plot of Residuals\",\n    subtitle = \"Check for normality assumption.\",\n    x = \"Theoretical Quantiles (Normal Distribution)\",\n    y = \"Sample Quantiles (Residuals)\"\n  ) +\n  scale_x_continuous(labels = scales::comma) +\n  scale_y_continuous(labels = scales::dollar) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 10)),\n    plot.subtitle = element_text(size = 11),\n    panel.grid.minor = element_blank(),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n  )\n\nqq_plot\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-75-1.png){width=672}\n:::\n:::\n\n\n**Normal Q–Q Plot:**\n\nThe Q–Q plot reveals that the residuals deviate from the reference line in both tails, especially in the upper tail. This pattern indicates that the residuals are right-skewed and not perfectly normally distributed. The deviation is mainly driven by a small number of very high sale-price observations, which pull the residual distribution upward. However, moderate departures from normality are common in housing price data and generally do not invalidate the model.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncd <- cooks.distance(final_model)\n\nused_row_idx <- as.integer(rownames(model.frame(final_model)))\n\ncooks_df <- tibble(\n  row_in_data  = used_row_idx,           \n  row_in_model = seq_along(cd),          \n  cooks_distance = as.numeric(cd)\n)\n\nn_used <- length(cd)\nthreshold <- 4 / n_used\n\ncooks_plot <- ggplot(cooks_df, aes(x = row_in_model, y = cooks_distance)) +\n  geom_bar(stat = \"identity\", fill = \"#2C7BB6\", alpha = 0.6) +\n  geom_hline(yintercept = threshold, color = \"red\", linetype = \"dashed\") +\n  coord_cartesian(ylim = c(0, 0.02)) +  \n  labs(\n    title = \"Cook's Distance (Zoomed In)\",\n    subtitle = paste0(\"Red Dashed Line = 4/n ≈ \", round(threshold, 5)),\n    x = \"Observation Index (In-Model)\",\n    y = \"Cook's Distance\"\n  ) +\n  scale_x_continuous(labels = scales::comma) +\n  scale_y_continuous(labels = scales::comma) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(face = \"bold\", size = 14, margin = margin(b = 10)),\n    plot.subtitle = element_text(size = 11),\n    panel.grid.minor = element_blank(),\n    axis.title.x = element_text(margin = margin(t = 10)),\n    axis.title.y = element_text(margin = margin(r = 10))\n  )\n\ncooks_plot\n```\n\n::: {.cell-output-display}\n![](Luu_Jun_Appendix_files/figure-html/unnamed-chunk-76-1.png){width=672}\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Most influential\ntop_influential <- cooks_df %>%\n  filter(cooks_distance > threshold) %>%\n  arrange(desc(cooks_distance)) %>%\n  slice_head(n = 10) %>%\n  mutate(\n    sale_price = final_data$sale_price[row_in_data]   \n  ) %>%\n  select(row_in_model, row_in_data, sale_price, cooks_distance)\n\ntop_influential\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 10 × 4\n   row_in_model row_in_data sale_price cooks_distance\n          <int>       <int>      <dbl>          <dbl>\n 1         6113        6113    3600000         0.197 \n 2         6383        6383    5477901         0.129 \n 3          198         198    3330400         0.0459\n 4         8210        8211     480000         0.0454\n 5         2496        2496    3995000         0.0395\n 6        10469       10470     281000         0.0356\n 7         7913        7914     330000         0.0325\n 8         2620        2620    3000000         0.0283\n 9         1921        1921     170000         0.0240\n10         5439        5439    3850000         0.0233\n```\n\n\n:::\n:::\n\n\n**Cook’s Distance:**\n\nThe Cook’s distance plot shows that almost all observations have very small influence values (below the 4/n threshold), indicating that the model is not dominated by a few extreme points. A few cases exhibit slightly higher Cook’s D values, suggesting the presence of mildly influential outliers, but none appear to exert excessive leverage on the regression coefficients.\n\n# Detailed Discussion\n\nOur final model achieves a cross-validated R² of 0.746, explaining approximately 75% of the variance in Philadelphia residential sale prices. The Mean Absolute Error (MAE) of 72,299 USD indicates that, on average, predicted sale prices deviate from actual prices by roughly 29% of the median home price (250,000 USD). However, the Root Mean Squared Error (RMSE) of 138,257USD—nearly double the MAE—reveals that the model struggles disproportionately with high-value properties. This discrepancy, combined with residuals ranging from -817,701 USD to +5.1 million USD, reflects the outsized influence of luxury homes on overall error. Diagnostic plots confirm these patterns: the Q-Q plot shows deviation from normality in both tails (especially the upper tail), while the residuals vs. fitted values plot exhibits a funnel-shaped pattern indicating heteroskedasticity—prediction error variance increases systematically for higher-priced properties. Despite these issues, the median residual of 2,339 USD (near zero) suggests the model's predictions are generally unbiased for typical homes, and Cook's distance values remain well below concerning thresholds, indicating no single observation dominates the model.\n\nThe model's minimum and maximum residuals range from -817,701 USD to +5.1 million USD, reflecting the outlier influence from luxury properties. While simultaneously referencing the QQ Plot, the model reflects two tails in the plot, but more in the positive region, indicating the model is not 100% normal. However, the residual distribution with the median residual of 2,339 USD is fairly close to 0, meaning the model predictions are generally centered about sale prices with limited bias in sale prediction. It is imperative to keep in mind that in the residuals vs fitted values plot, the increase of observations fanning-out as the predicted sale price value increases indicates the existence of heteroskedasticity between some variables.\n\nWe have concluded that ln_square_feet, neighborhood fixed effects, median household income, number of bathrooms and number of fireplaces as the most significant variables in our model. We calculated this by doing a stepwise regression, and these five yield the highest $R^2$.\n\nWe grossly underpredicted for University City, and a decent amount for Fairmount. This model struggles to accurately predict rural areas and overpredicted uninvested neighborhoods. The severe underprediction of University City may be due to the existence and proximity to Drexel University and the University of Pennsylvania.\n\n# External Resources\n\n### Downloads\n\n- [Property Data](https://opendataphilly.org/datasets/philadelphia-properties-and-assessment-history/)\n\n- [Neighborhood Boundaries](https://opendataphilly.org/datasets/philadelphia-neighborhoods/)\n\n- [Parks](https://rspatialdata.github.io/osm.html)\n\n- [Tracts Data](https://www.census.gov/cgi-bin/geo/shapefiles/index.php?year=2020&layergroup=Census+Tracts)\n\n- [SEPTA Stations](https://opendataphilly.org/datasets/septa-routes-stops-locations/)\n\n- [ACS Data](https://walker-data.com/tidycensus/)\n\n- [Open Street Maps for Points of Interest](https://rspatialdata.github.io/osm.html)\n\n### Relevant Readings\n\n- [Homes in poor neighborhoods are taxed at roughly twice the rate of those in rich areas, study shows](https://www.washingtonpost.com/business/2021/03/12/property-tax-regressive/)\n\n- [Philadelphia ranks among top 5 cities for hottest housing market in 2025, Zillow says](https://6abc.com/post/philadelphia-ranks-among-top-5-cities-hottest-housing-market-2025-zillow-says/15777492/#:~:text=real%20estate-,Philadelphia%20ranks%20among%20top%205%20cities%20for,market%20in%202025%2C%20Zillow%20says&text=Zillow%20is%20out%20with%20its,how%20quickly%20homes%20are%20selling.)\n\n- [How Major Universities in the US Are Negatively Impacting Local Black Communities](https://www.pbs.org/wnet/chasing-the-dream/2021/04/universities-negatively-impact-black-locals-professor-baldwin/#:~:text=YOU'RE%20NOT%20JUST%20LOOKING,BRING%20TO%20THE%20PUBLIC%20GOOD?)\n\n### Artificial Intelligence\n\n- Claude: For code debugging in data cleaning and visualizations.\n\n- Chat GPT: For code debugging in data cleaning and visualizations.",
    "supporting": [
      "Luu_Jun_Appendix_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/kePrint-0.0.1/kePrint.js\"></script>\n<link href=\"../../site_libs/lightable-0.0.1/lightable.css\" rel=\"stylesheet\" />\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}